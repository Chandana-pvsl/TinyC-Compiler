Starting parse
Entering state 0
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 9
Reducing stack by rule 105 (line 221):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0
Entering state 25
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 193):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0
Entering state 23
Next token is token IDENTIFIER ()
Reducing stack by rule 143 (line 294):
-> $$ = nterm pointer_opt ()
Stack now 0 23
Entering state 39
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 59
Reducing stack by rule 133 (line 281):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 23 39
Entering state 61
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 135
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 9
Reducing stack by rule 105 (line 221):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 23 39 61 135
Entering state 25
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 193):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 23 39 61 135
Entering state 216
Next token is token IDENTIFIER ()
Reducing stack by rule 143 (line 294):
-> $$ = nterm pointer_opt ()
Stack now 0 23 39 61 135 216
Entering state 39
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 59
Reducing stack by rule 133 (line 281):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 23 39 61 135 216 39
Entering state 61
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 136
Reading a token: Next token is token ']' ()
Reducing stack by rule 147 (line 304):
-> $$ = nterm type_qualifier_list_opt ()
Stack now 0 23 39 61 135 216 39 61 136
Entering state 223
Next token is token ']' ()
Shifting token ']' ()
Entering state 287
Reducing stack by rule 136 (line 284):
   $1 = nterm direct_declarator ()
   $2 = token '[' ()
   $3 = nterm type_qualifier_list_opt ()
   $4 = token ']' ()
-> $$ = nterm direct_declarator ()
Stack now 0 23 39 61 135 216 39
Entering state 61
Reading a token: Next token is token ',' ()
Reducing stack by rule 132 (line 276):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 23 39 61 135 216
Entering state 281
Reducing stack by rule 154 (line 322):
   $1 = nterm declaration_specifiers ()
   $2 = nterm declarator ()
-> $$ = nterm parameter_declaration ()
Stack now 0 23 39 61 135
Entering state 219
Reducing stack by rule 152 (line 317):
   $1 = nterm parameter_declaration ()
-> $$ = nterm parameter_list ()
Stack now 0 23 39 61 135
Entering state 218
Next token is token ',' ()
Shifting token ',' ()
Entering state 283
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 9
Reducing stack by rule 105 (line 221):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 23 39 61 135 218 283
Entering state 25
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 193):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 23 39 61 135 218 283
Entering state 216
Next token is token IDENTIFIER ()
Reducing stack by rule 143 (line 294):
-> $$ = nterm pointer_opt ()
Stack now 0 23 39 61 135 218 283 216
Entering state 39
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 59
Reducing stack by rule 133 (line 281):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 23 39 61 135 218 283 216 39
Entering state 61
Reading a token: Next token is token ')' ()
Reducing stack by rule 132 (line 276):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 23 39 61 135 218 283 216
Entering state 281
Reducing stack by rule 154 (line 322):
   $1 = nterm declaration_specifiers ()
   $2 = nterm declarator ()
-> $$ = nterm parameter_declaration ()
Stack now 0 23 39 61 135 218 283
Entering state 311
Reducing stack by rule 153 (line 318):
   $1 = nterm parameter_list ()
   $2 = token ',' ()
   $3 = nterm parameter_declaration ()
-> $$ = nterm parameter_list ()
Stack now 0 23 39 61 135
Entering state 218
Next token is token ')' ()
Reducing stack by rule 150 (line 313):
   $1 = nterm parameter_list ()
-> $$ = nterm parameter_type_list ()
Stack now 0 23 39 61 135
Entering state 217
Next token is token ')' ()
Shifting token ')' ()
Entering state 282
Reducing stack by rule 140 (line 288):
   $1 = nterm direct_declarator ()
   $2 = token '(' ()
   $3 = nterm parameter_type_list ()
   $4 = token ')' ()
-> $$ = nterm direct_declarator ()
Stack now 0 23 39
Entering state 61
Reading a token: Next token is token '{' ()
Reducing stack by rule 132 (line 276):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 23
Entering state 38
Next token is token '{' ()
Shifting token '{' ()
Entering state 54
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 9
Reducing stack by rule 105 (line 221):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 23 38 54
Entering state 25
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 193):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 23 38 54
Entering state 56
Next token is token IDENTIFIER ()
Reducing stack by rule 143 (line 294):
-> $$ = nterm pointer_opt ()
Stack now 0 23 38 54 56
Entering state 39
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 59
Reducing stack by rule 133 (line 281):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 23 38 54 56 39
Entering state 61
Reading a token: Next token is token ASSIGN ()
Reducing stack by rule 132 (line 276):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 23 38 54 56
Entering state 68
Next token is token ASSIGN ()
Shifting token ASSIGN ()
Entering state 53
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 72
Reducing stack by rule 5 (line 36):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 23 38 54 56 68 53
Entering state 87
Reducing stack by rule 2 (line 29):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 23 38 54 56 68 53
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 23 38 54 56 68 53
Entering state 88
Reading a token: Next token is token ',' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 23 38 54 56 68 53
Entering state 89
Next token is token ',' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 23 38 54 56 68 53
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 23 38 54 56 68 53
Entering state 92
Next token is token ',' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 23 38 54 56 68 53
Entering state 93
Next token is token ',' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 23 38 54 56 68 53
Entering state 94
Next token is token ',' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 23 38 54 56 68 53
Entering state 95
Next token is token ',' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 23 38 54 56 68 53
Entering state 96
Next token is token ',' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 23 38 54 56 68 53
Entering state 97
Next token is token ',' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 23 38 54 56 68 53
Entering state 98
Next token is token ',' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 23 38 54 56 68 53
Entering state 99
Next token is token ',' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 23 38 54 56 68 53
Entering state 100
Next token is token ',' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 23 38 54 56 68 53
Entering state 101
Next token is token ',' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 23 38 54 56 68 53
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 23 38 54 56 68 53
Entering state 103
Reducing stack by rule 161 (line 341):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 23 38 54 56 68 53
Entering state 104
Reducing stack by rule 97 (line 207):
   $1 = nterm declarator ()
   $2 = token ASSIGN ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 23 38 54 56
Entering state 37
Reducing stack by rule 94 (line 201):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 23 38 54 56
Entering state 36
Next token is token ',' ()
Shifting token ',' ()
Entering state 51
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 143 (line 294):
-> $$ = nterm pointer_opt ()
Stack now 0 23 38 54 56 36 51
Entering state 39
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 59
Reducing stack by rule 133 (line 281):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 23 38 54 56 36 51 39
Entering state 61
Reading a token: Next token is token ';' ()
Reducing stack by rule 132 (line 276):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 23 38 54 56 36 51
Entering state 68
Next token is token ';' ()
Reducing stack by rule 96 (line 206):
   $1 = nterm declarator ()
-> $$ = nterm init_declarator ()
Stack now 0 23 38 54 56 36 51
Entering state 67
Reducing stack by rule 95 (line 202):
   $1 = nterm init_declarator_list ()
   $2 = token ',' ()
   $3 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 23 38 54 56
Entering state 36
Next token is token ';' ()
Shifting token ';' ()
Entering state 52
Reducing stack by rule 84 (line 183):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 23 38 54
Entering state 121
Reducing stack by rule 186 (line 394):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 23 38 54
Entering state 126
Reducing stack by rule 184 (line 389):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 23 38 54
Entering state 125
Reading a token: Next token is token FOR ()
Shifting token FOR ()
Entering state 111
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 203
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 23 38 54 125 111 203
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 23 38 54 125 111 203
Entering state 88
Reading a token: Next token is token ASSIGN ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 23 38 54 125 111 203
Entering state 89
Next token is token ASSIGN ()
Shifting token ASSIGN ()
Entering state 163
Reducing stack by rule 68 (line 155):
   $1 = token ASSIGN ()
-> $$ = nterm assignment_operator ()
Stack now 0 23 38 54 125 111 203 89
Entering state 174
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 72
Reducing stack by rule 5 (line 36):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 23 38 54 125 111 203 89 174
Entering state 87
Reducing stack by rule 2 (line 29):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 23 38 54 125 111 203 89 174
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 23 38 54 125 111 203 89 174
Entering state 88
Reading a token: Next token is token ';' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 23 38 54 125 111 203 89 174
Entering state 89
Next token is token ';' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 23 38 54 125 111 203 89 174
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 23 38 54 125 111 203 89 174
Entering state 92
Next token is token ';' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 23 38 54 125 111 203 89 174
Entering state 93
Next token is token ';' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 23 38 54 125 111 203 89 174
Entering state 94
Next token is token ';' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 23 38 54 125 111 203 89 174
Entering state 95
Next token is token ';' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 23 38 54 125 111 203 89 174
Entering state 96
Next token is token ';' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 23 38 54 125 111 203 89 174
Entering state 97
Next token is token ';' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 23 38 54 125 111 203 89 174
Entering state 98
Next token is token ';' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 23 38 54 125 111 203 89 174
Entering state 99
Next token is token ';' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 23 38 54 125 111 203 89 174
Entering state 100
Next token is token ';' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 23 38 54 125 111 203 89 174
Entering state 101
Next token is token ';' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 23 38 54 125 111 203 89 174
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 23 38 54 125 111 203 89 174
Entering state 248
Reducing stack by rule 67 (line 151):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 23 38 54 125 111 203
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 23 38 54 125 111 203
Entering state 120
Next token is token ';' ()
Reducing stack by rule 79 (line 169):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 23 38 54 125 111 203
Entering state 272
Next token is token ';' ()
Shifting token ';' ()
Entering state 306
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 23 38 54 125 111 203 272 306
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 23 38 54 125 111 203 272 306
Entering state 88
Reading a token: Next token is token LT ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 23 38 54 125 111 203 272 306
Entering state 89
Next token is token LT ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 23 38 54 125 111 203 272 306
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 23 38 54 125 111 203 272 306
Entering state 92
Next token is token LT ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 23 38 54 125 111 203 272 306
Entering state 93
Next token is token LT ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 23 38 54 125 111 203 272 306
Entering state 94
Next token is token LT ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 23 38 54 125 111 203 272 306
Entering state 95
Next token is token LT ()
Shifting token LT ()
Entering state 186
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 23 38 54 125 111 203 272 306 95 186
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 23 38 54 125 111 203 272 306 95 186
Entering state 88
Reading a token: Next token is token ';' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 23 38 54 125 111 203 272 306 95 186
Entering state 175
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 23 38 54 125 111 203 272 306 95 186
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 23 38 54 125 111 203 272 306 95 186
Entering state 92
Next token is token ';' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 23 38 54 125 111 203 272 306 95 186
Entering state 93
Next token is token ';' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 23 38 54 125 111 203 272 306 95 186
Entering state 258
Next token is token ';' ()
Reducing stack by rule 47 (line 106):
   $1 = nterm relational_expression ()
   $2 = token LT ()
   $3 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 23 38 54 125 111 203 272 306
Entering state 95
Next token is token ';' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 23 38 54 125 111 203 272 306
Entering state 96
Next token is token ';' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 23 38 54 125 111 203 272 306
Entering state 97
Next token is token ';' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 23 38 54 125 111 203 272 306
Entering state 98
Next token is token ';' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 23 38 54 125 111 203 272 306
Entering state 99
Next token is token ';' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 23 38 54 125 111 203 272 306
Entering state 100
Next token is token ';' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 23 38 54 125 111 203 272 306
Entering state 101
Next token is token ';' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 23 38 54 125 111 203 272 306
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 23 38 54 125 111 203 272 306
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 23 38 54 125 111 203 272 306
Entering state 120
Next token is token ';' ()
Reducing stack by rule 79 (line 169):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 23 38 54 125 111 203 272 306
Entering state 323
Next token is token ';' ()
Shifting token ';' ()
Entering state 332
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332
Entering state 88
Reading a token: Next token is token INCREMENT ()
Shifting token INCREMENT ()
Entering state 157
Reducing stack by rule 14 (line 47):
   $1 = nterm postfix_expression ()
   $2 = token INCREMENT ()
-> $$ = nterm postfix_expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332
Entering state 88
Reading a token: Next token is token ')' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332
Entering state 89
Next token is token ')' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332
Entering state 92
Next token is token ')' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332
Entering state 93
Next token is token ')' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332
Entering state 94
Next token is token ')' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332
Entering state 95
Next token is token ')' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332
Entering state 96
Next token is token ')' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332
Entering state 97
Next token is token ')' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332
Entering state 98
Next token is token ')' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332
Entering state 99
Next token is token ')' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332
Entering state 100
Next token is token ')' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332
Entering state 101
Next token is token ')' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332
Entering state 120
Next token is token ')' ()
Reducing stack by rule 79 (line 169):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 23 38 54 125 111 203 272 306 323 332
Entering state 336
Next token is token ')' ()
Shifting token ')' ()
Entering state 338
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 116
Reading a token: Next token is token ASSIGN_BIT_XOR ()
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332 336 338
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332 336 338
Entering state 88
Next token is token ASSIGN_BIT_XOR ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332 336 338
Entering state 89
Next token is token ASSIGN_BIT_XOR ()
Shifting token ASSIGN_BIT_XOR ()
Entering state 172
Reducing stack by rule 77 (line 164):
   $1 = token ASSIGN_BIT_XOR ()
-> $$ = nterm assignment_operator ()
Stack now 0 23 38 54 125 111 203 272 306 323 332 336 338 89
Entering state 174
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332 336 338 89 174
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332 336 338 89 174
Entering state 88
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 161
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332 336 338 89 174 88 161
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332 336 338 89 174 88 161
Entering state 88
Reading a token: Next token is token ']' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332 336 338 89 174 88 161
Entering state 89
Next token is token ']' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332 336 338 89 174 88 161
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332 336 338 89 174 88 161
Entering state 92
Next token is token ']' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332 336 338 89 174 88 161
Entering state 93
Next token is token ']' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332 336 338 89 174 88 161
Entering state 94
Next token is token ']' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332 336 338 89 174 88 161
Entering state 95
Next token is token ']' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332 336 338 89 174 88 161
Entering state 96
Next token is token ']' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332 336 338 89 174 88 161
Entering state 97
Next token is token ']' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332 336 338 89 174 88 161
Entering state 98
Next token is token ']' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332 336 338 89 174 88 161
Entering state 99
Next token is token ']' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332 336 338 89 174 88 161
Entering state 100
Next token is token ']' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332 336 338 89 174 88 161
Entering state 101
Next token is token ']' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332 336 338 89 174 88 161
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332 336 338 89 174 88 161
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332 336 338 89 174 88 161
Entering state 246
Next token is token ']' ()
Shifting token ']' ()
Entering state 301
Reducing stack by rule 10 (line 43):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm postfix_expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332 336 338 89 174
Entering state 88
Reading a token: Next token is token ';' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332 336 338 89 174
Entering state 89
Next token is token ';' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332 336 338 89 174
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332 336 338 89 174
Entering state 92
Next token is token ';' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332 336 338 89 174
Entering state 93
Next token is token ';' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332 336 338 89 174
Entering state 94
Next token is token ';' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332 336 338 89 174
Entering state 95
Next token is token ';' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332 336 338 89 174
Entering state 96
Next token is token ';' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332 336 338 89 174
Entering state 97
Next token is token ';' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332 336 338 89 174
Entering state 98
Next token is token ';' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332 336 338 89 174
Entering state 99
Next token is token ';' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332 336 338 89 174
Entering state 100
Next token is token ';' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332 336 338 89 174
Entering state 101
Next token is token ';' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332 336 338 89 174
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332 336 338 89 174
Entering state 248
Reducing stack by rule 67 (line 151):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332 336 338
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 23 38 54 125 111 203 272 306 323 332 336 338
Entering state 120
Next token is token ';' ()
Reducing stack by rule 79 (line 169):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 23 38 54 125 111 203 272 306 323 332 336 338
Entering state 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 209
Reducing stack by rule 188 (line 399):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 23 38 54 125 111 203 272 306 323 332 336 338
Entering state 127
Reducing stack by rule 175 (line 370):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 23 38 54 125 111 203 272 306 323 332 336 338
Entering state 340
Reducing stack by rule 195 (line 415):
   $1 = token FOR ()
   $2 = token '(' ()
   $3 = nterm expression_opt ()
   $4 = token ';' ()
   $5 = nterm expression_opt ()
   $6 = token ';' ()
   $7 = nterm expression_opt ()
   $8 = token ')' ()
   $9 = nterm statement ()
-> $$ = nterm iteration_statement ()
Stack now 0 23 38 54 125
Entering state 130
Reducing stack by rule 177 (line 372):
   $1 = nterm iteration_statement ()
-> $$ = nterm statement ()
Stack now 0 23 38 54 125
Entering state 122
Reducing stack by rule 187 (line 395):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 23 38 54 125
Entering state 212
Reducing stack by rule 185 (line 390):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 23 38 54
Entering state 125
Reading a token: Next token is token RETURN ()
Shifting token RETURN ()
Entering state 115
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 23 38 54 125 115
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 23 38 54 125 115
Entering state 88
Reading a token: Next token is token ';' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 23 38 54 125 115
Entering state 89
Next token is token ';' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 23 38 54 125 115
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 23 38 54 125 115
Entering state 92
Next token is token ';' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 23 38 54 125 115
Entering state 93
Next token is token ';' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 23 38 54 125 115
Entering state 94
Next token is token ';' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 23 38 54 125 115
Entering state 95
Next token is token ';' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 23 38 54 125 115
Entering state 96
Next token is token ';' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 23 38 54 125 115
Entering state 97
Next token is token ';' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 23 38 54 125 115
Entering state 98
Next token is token ';' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 23 38 54 125 115
Entering state 99
Next token is token ';' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 23 38 54 125 115
Entering state 100
Next token is token ';' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 23 38 54 125 115
Entering state 101
Next token is token ';' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 23 38 54 125 115
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 23 38 54 125 115
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 23 38 54 125 115
Entering state 120
Next token is token ';' ()
Reducing stack by rule 79 (line 169):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 23 38 54 125 115
Entering state 207
Next token is token ';' ()
Shifting token ';' ()
Entering state 277
Reducing stack by rule 200 (line 423):
   $1 = token RETURN ()
   $2 = nterm expression_opt ()
   $3 = token ';' ()
-> $$ = nterm jump_statement ()
Stack now 0 23 38 54 125
Entering state 131
Reducing stack by rule 178 (line 373):
   $1 = nterm jump_statement ()
-> $$ = nterm statement ()
Stack now 0 23 38 54 125
Entering state 122
Reducing stack by rule 187 (line 395):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 23 38 54 125
Entering state 212
Reducing stack by rule 185 (line 390):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 23 38 54
Entering state 125
Reading a token: Next token is token '}' ()
Shifting token '}' ()
Entering state 211
Reducing stack by rule 182 (line 383):
   $1 = token '{' ()
   $2 = nterm block_item_list ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 23 38
Entering state 57
Reducing stack by rule 206 (line 438):
   $1 = nterm declaration_specifiers ()
   $2 = nterm declarator ()
   $3 = nterm compound_statement ()
-> $$ = nterm function_definition ()
Stack now 0
Entering state 31
Reducing stack by rule 203 (line 432):
   $1 = nterm function_definition ()
-> $$ = nterm external_declaration ()
Stack now 0
Entering state 30
Reducing stack by rule 201 (line 427):
   $1 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 29
Reading a token: Next token is token INLINE ()
Shifting token INLINE ()
Entering state 5
Reducing stack by rule 131 (line 272):
   $1 = token INLINE ()
-> $$ = nterm function_specifier ()
Stack now 0 29
Entering state 28
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 9
Reducing stack by rule 105 (line 221):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 29 28
Entering state 25
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 193):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29 28
Entering state 44
Reducing stack by rule 92 (line 196):
   $1 = nterm function_specifier ()
   $2 = nterm declaration_specifiers ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29
Entering state 23
Next token is token IDENTIFIER ()
Reducing stack by rule 143 (line 294):
-> $$ = nterm pointer_opt ()
Stack now 0 29 23
Entering state 39
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 59
Reducing stack by rule 133 (line 281):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 29 23 39
Entering state 61
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 135
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 9
Reducing stack by rule 105 (line 221):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 29 23 39 61 135
Entering state 25
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 193):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29 23 39 61 135
Entering state 216
Next token is token IDENTIFIER ()
Reducing stack by rule 143 (line 294):
-> $$ = nterm pointer_opt ()
Stack now 0 29 23 39 61 135 216
Entering state 39
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 59
Reducing stack by rule 133 (line 281):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 29 23 39 61 135 216 39
Entering state 61
Reading a token: Next token is token ')' ()
Reducing stack by rule 132 (line 276):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 29 23 39 61 135 216
Entering state 281
Reducing stack by rule 154 (line 322):
   $1 = nterm declaration_specifiers ()
   $2 = nterm declarator ()
-> $$ = nterm parameter_declaration ()
Stack now 0 29 23 39 61 135
Entering state 219
Reducing stack by rule 152 (line 317):
   $1 = nterm parameter_declaration ()
-> $$ = nterm parameter_list ()
Stack now 0 29 23 39 61 135
Entering state 218
Next token is token ')' ()
Reducing stack by rule 150 (line 313):
   $1 = nterm parameter_list ()
-> $$ = nterm parameter_type_list ()
Stack now 0 29 23 39 61 135
Entering state 217
Next token is token ')' ()
Shifting token ')' ()
Entering state 282
Reducing stack by rule 140 (line 288):
   $1 = nterm direct_declarator ()
   $2 = token '(' ()
   $3 = nterm parameter_type_list ()
   $4 = token ')' ()
-> $$ = nterm direct_declarator ()
Stack now 0 29 23 39
Entering state 61
Reading a token: Next token is token '{' ()
Reducing stack by rule 132 (line 276):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 29 23
Entering state 38
Next token is token '{' ()
Shifting token '{' ()
Entering state 54
Reading a token: Next token is token IF ()
Shifting token IF ()
Entering state 110
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 202
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 110 202
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 110 202
Entering state 88
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 161
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 110 202 88 161
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 110 202 88 161
Entering state 88
Reading a token: Next token is token ']' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 110 202 88 161
Entering state 89
Next token is token ']' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 110 202 88 161
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 110 202 88 161
Entering state 92
Next token is token ']' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 110 202 88 161
Entering state 93
Next token is token ']' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 110 202 88 161
Entering state 94
Next token is token ']' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 110 202 88 161
Entering state 95
Next token is token ']' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 110 202 88 161
Entering state 96
Next token is token ']' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 110 202 88 161
Entering state 97
Next token is token ']' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 110 202 88 161
Entering state 98
Next token is token ']' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 110 202 88 161
Entering state 99
Next token is token ']' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 110 202 88 161
Entering state 100
Next token is token ']' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 110 202 88 161
Entering state 101
Next token is token ']' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 110 202 88 161
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 110 202 88 161
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 54 110 202 88 161
Entering state 246
Next token is token ']' ()
Shifting token ']' ()
Entering state 301
Reducing stack by rule 10 (line 43):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 110 202
Entering state 88
Reading a token: Next token is token EQ ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 110 202
Entering state 89
Next token is token EQ ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 110 202
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 110 202
Entering state 92
Next token is token EQ ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 110 202
Entering state 93
Next token is token EQ ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 110 202
Entering state 94
Next token is token EQ ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 110 202
Entering state 95
Next token is token EQ ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 110 202
Entering state 96
Next token is token EQ ()
Shifting token EQ ()
Entering state 188
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 110 202 96 188
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 110 202 96 188
Entering state 88
Reading a token: Next token is token ')' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 110 202 96 188
Entering state 175
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 110 202 96 188
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 110 202 96 188
Entering state 92
Next token is token ')' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 110 202 96 188
Entering state 93
Next token is token ')' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 110 202 96 188
Entering state 94
Next token is token ')' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 110 202 96 188
Entering state 260
Next token is token ')' ()
Reducing stack by rule 52 (line 114):
   $1 = nterm equality_expression ()
   $2 = token EQ ()
   $3 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 110 202
Entering state 96
Next token is token ')' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 110 202
Entering state 97
Next token is token ')' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 110 202
Entering state 98
Next token is token ')' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 110 202
Entering state 99
Next token is token ')' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 110 202
Entering state 100
Next token is token ')' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 110 202
Entering state 101
Next token is token ')' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 110 202
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 110 202
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 54 110 202
Entering state 271
Next token is token ')' ()
Shifting token ')' ()
Entering state 305
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 54
Reading a token: Next token is token IF ()
Shifting token IF ()
Entering state 110
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 202
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202
Entering state 88
Reading a token: Next token is token LTE ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202
Entering state 89
Next token is token LTE ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202
Entering state 92
Next token is token LTE ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202
Entering state 93
Next token is token LTE ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202
Entering state 94
Next token is token LTE ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202
Entering state 95
Next token is token LTE ()
Shifting token LTE ()
Entering state 184
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 72
Reducing stack by rule 5 (line 36):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202 95 184
Entering state 87
Reducing stack by rule 2 (line 29):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202 95 184
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202 95 184
Entering state 88
Reading a token: Next token is token ')' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202 95 184
Entering state 175
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202 95 184
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202 95 184
Entering state 92
Next token is token ')' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202 95 184
Entering state 93
Next token is token ')' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202 95 184
Entering state 256
Next token is token ')' ()
Reducing stack by rule 49 (line 108):
   $1 = nterm relational_expression ()
   $2 = token LTE ()
   $3 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202
Entering state 95
Next token is token ')' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202
Entering state 96
Next token is token ')' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202
Entering state 97
Next token is token ')' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202
Entering state 98
Next token is token ')' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202
Entering state 99
Next token is token ')' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202
Entering state 100
Next token is token ')' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202
Entering state 101
Next token is token ')' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202
Entering state 271
Next token is token ')' ()
Shifting token ')' ()
Entering state 305
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 116
Reading a token: Next token is token '[' ()
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202 271 305
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202 271 305
Entering state 88
Next token is token '[' ()
Shifting token '[' ()
Entering state 161
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202 271 305 88 161
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202 271 305 88 161
Entering state 88
Reading a token: Next token is token ']' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202 271 305 88 161
Entering state 89
Next token is token ']' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202 271 305 88 161
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202 271 305 88 161
Entering state 92
Next token is token ']' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202 271 305 88 161
Entering state 93
Next token is token ']' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202 271 305 88 161
Entering state 94
Next token is token ']' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202 271 305 88 161
Entering state 95
Next token is token ']' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202 271 305 88 161
Entering state 96
Next token is token ']' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202 271 305 88 161
Entering state 97
Next token is token ']' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202 271 305 88 161
Entering state 98
Next token is token ']' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202 271 305 88 161
Entering state 99
Next token is token ']' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202 271 305 88 161
Entering state 100
Next token is token ']' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202 271 305 88 161
Entering state 101
Next token is token ']' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202 271 305 88 161
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202 271 305 88 161
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202 271 305 88 161
Entering state 246
Next token is token ']' ()
Shifting token ']' ()
Entering state 301
Reducing stack by rule 10 (line 43):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202 271 305
Entering state 88
Reading a token: Next token is token ASSIGN ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202 271 305
Entering state 89
Next token is token ASSIGN ()
Shifting token ASSIGN ()
Entering state 163
Reducing stack by rule 68 (line 155):
   $1 = token ASSIGN ()
-> $$ = nterm assignment_operator ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202 271 305 89
Entering state 174
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202 271 305 89 174
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202 271 305 89 174
Entering state 88
Reading a token: Next token is token ';' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202 271 305 89 174
Entering state 89
Next token is token ';' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202 271 305 89 174
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202 271 305 89 174
Entering state 92
Next token is token ';' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202 271 305 89 174
Entering state 93
Next token is token ';' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202 271 305 89 174
Entering state 94
Next token is token ';' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202 271 305 89 174
Entering state 95
Next token is token ';' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202 271 305 89 174
Entering state 96
Next token is token ';' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202 271 305 89 174
Entering state 97
Next token is token ';' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202 271 305 89 174
Entering state 98
Next token is token ';' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202 271 305 89 174
Entering state 99
Next token is token ';' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202 271 305 89 174
Entering state 100
Next token is token ';' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202 271 305 89 174
Entering state 101
Next token is token ';' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202 271 305 89 174
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202 271 305 89 174
Entering state 248
Reducing stack by rule 67 (line 151):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202 271 305
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202 271 305
Entering state 120
Next token is token ';' ()
Reducing stack by rule 79 (line 169):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202 271 305
Entering state 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 209
Reducing stack by rule 188 (line 399):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202 271 305
Entering state 127
Reducing stack by rule 175 (line 370):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 54 110 202 271 305 54 110 202 271 305
Entering state 322
Reducing stack by rule 189 (line 403):
   $1 = token IF ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm statement ()
-> $$ = nterm selection_statement_base ()
Stack now 0 29 23 38 54 110 202 271 305 54
Entering state 128
Reading a token: Next token is token ELSE ()
Shifting token ELSE ()
Entering state 213
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 116
Reading a token: Next token is token '[' ()
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213
Entering state 88
Next token is token '[' ()
Shifting token '[' ()
Entering state 161
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 88 161
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 88 161
Entering state 88
Reading a token: Next token is token ']' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 88 161
Entering state 89
Next token is token ']' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 88 161
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 88 161
Entering state 92
Next token is token ']' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 88 161
Entering state 93
Next token is token ']' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 88 161
Entering state 94
Next token is token ']' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 88 161
Entering state 95
Next token is token ']' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 88 161
Entering state 96
Next token is token ']' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 88 161
Entering state 97
Next token is token ']' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 88 161
Entering state 98
Next token is token ']' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 88 161
Entering state 99
Next token is token ']' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 88 161
Entering state 100
Next token is token ']' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 88 161
Entering state 101
Next token is token ']' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 88 161
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 88 161
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 88 161
Entering state 246
Next token is token ']' ()
Shifting token ']' ()
Entering state 301
Reducing stack by rule 10 (line 43):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213
Entering state 88
Reading a token: Next token is token ASSIGN ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213
Entering state 89
Next token is token ASSIGN ()
Shifting token ASSIGN ()
Entering state 163
Reducing stack by rule 68 (line 155):
   $1 = token ASSIGN ()
-> $$ = nterm assignment_operator ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89
Entering state 174
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174
Entering state 88
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 160
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 88 160
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 88 160
Entering state 88
Reading a token: Next token is token '-' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 88 160
Entering state 89
Next token is token '-' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 88 160
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 88 160
Entering state 92
Next token is token '-' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 88 160
Entering state 93
Next token is token '-' ()
Shifting token '-' ()
Entering state 181
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 72
Reducing stack by rule 5 (line 36):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 88 160 93 181
Entering state 87
Reducing stack by rule 2 (line 29):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 88 160 93 181
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 88 160 93 181
Entering state 88
Reading a token: Next token is token ')' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 88 160 93 181
Entering state 175
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 88 160 93 181
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 88 160 93 181
Entering state 253
Next token is token ')' ()
Reducing stack by rule 42 (line 95):
   $1 = nterm additive_expression ()
   $2 = token '-' ()
   $3 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 88 160
Entering state 93
Next token is token ')' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 88 160
Entering state 94
Next token is token ')' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 88 160
Entering state 95
Next token is token ')' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 88 160
Entering state 96
Next token is token ')' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 88 160
Entering state 97
Next token is token ')' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 88 160
Entering state 98
Next token is token ')' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 88 160
Entering state 99
Next token is token ')' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 88 160
Entering state 100
Next token is token ')' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 88 160
Entering state 101
Next token is token ')' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 88 160
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 88 160
Entering state 245
Reducing stack by rule 20 (line 59):
   $1 = nterm assignment_expression ()
-> $$ = nterm argument_expression_list ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 88 160
Entering state 244
Next token is token ')' ()
Reducing stack by rule 18 (line 54):
   $1 = nterm argument_expression_list ()
-> $$ = nterm argument_expression_list_opt ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 88 160
Entering state 243
Next token is token ')' ()
Shifting token ')' ()
Entering state 299
Reducing stack by rule 11 (line 44):
   $1 = nterm postfix_expression ()
   $2 = token '(' ()
   $3 = nterm argument_expression_list_opt ()
   $4 = token ')' ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174
Entering state 88
Reading a token: Next token is token '+' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174
Entering state 89
Next token is token '+' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174
Entering state 92
Next token is token '+' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174
Entering state 93
Next token is token '+' ()
Shifting token '+' ()
Entering state 180
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 93 180
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 93 180
Entering state 88
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 160
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 93 180 88 160
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 93 180 88 160
Entering state 88
Reading a token: Next token is token '-' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 93 180 88 160
Entering state 89
Next token is token '-' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 93 180 88 160
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 93 180 88 160
Entering state 92
Next token is token '-' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 93 180 88 160
Entering state 93
Next token is token '-' ()
Shifting token '-' ()
Entering state 181
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 72
Reducing stack by rule 5 (line 36):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 93 180 88 160 93 181
Entering state 87
Reducing stack by rule 2 (line 29):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 93 180 88 160 93 181
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 93 180 88 160 93 181
Entering state 88
Reading a token: Next token is token ')' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 93 180 88 160 93 181
Entering state 175
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 93 180 88 160 93 181
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 93 180 88 160 93 181
Entering state 253
Next token is token ')' ()
Reducing stack by rule 42 (line 95):
   $1 = nterm additive_expression ()
   $2 = token '-' ()
   $3 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 93 180 88 160
Entering state 93
Next token is token ')' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 93 180 88 160
Entering state 94
Next token is token ')' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 93 180 88 160
Entering state 95
Next token is token ')' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 93 180 88 160
Entering state 96
Next token is token ')' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 93 180 88 160
Entering state 97
Next token is token ')' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 93 180 88 160
Entering state 98
Next token is token ')' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 93 180 88 160
Entering state 99
Next token is token ')' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 93 180 88 160
Entering state 100
Next token is token ')' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 93 180 88 160
Entering state 101
Next token is token ')' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 93 180 88 160
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 93 180 88 160
Entering state 245
Reducing stack by rule 20 (line 59):
   $1 = nterm assignment_expression ()
-> $$ = nterm argument_expression_list ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 93 180 88 160
Entering state 244
Next token is token ')' ()
Reducing stack by rule 18 (line 54):
   $1 = nterm argument_expression_list ()
-> $$ = nterm argument_expression_list_opt ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 93 180 88 160
Entering state 243
Next token is token ')' ()
Shifting token ')' ()
Entering state 299
Reducing stack by rule 11 (line 44):
   $1 = nterm postfix_expression ()
   $2 = token '(' ()
   $3 = nterm argument_expression_list_opt ()
   $4 = token ')' ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 93 180
Entering state 88
Reading a token: Next token is token ';' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 93 180
Entering state 175
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 93 180
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174 93 180
Entering state 252
Next token is token ';' ()
Reducing stack by rule 41 (line 94):
   $1 = nterm additive_expression ()
   $2 = token '+' ()
   $3 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174
Entering state 93
Next token is token ';' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174
Entering state 94
Next token is token ';' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174
Entering state 95
Next token is token ';' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174
Entering state 96
Next token is token ';' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174
Entering state 97
Next token is token ';' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174
Entering state 98
Next token is token ';' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174
Entering state 99
Next token is token ';' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174
Entering state 100
Next token is token ';' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174
Entering state 101
Next token is token ';' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213 89 174
Entering state 248
Reducing stack by rule 67 (line 151):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213
Entering state 120
Next token is token ';' ()
Reducing stack by rule 79 (line 169):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213
Entering state 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 209
Reducing stack by rule 188 (line 399):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213
Entering state 127
Reducing stack by rule 175 (line 370):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 54 110 202 271 305 54 128 213
Entering state 280
Reducing stack by rule 191 (line 408):
   $1 = nterm selection_statement_base ()
   $2 = token ELSE ()
   $3 = nterm statement ()
-> $$ = nterm selection_statement ()
Stack now 0 29 23 38 54 110 202 271 305 54
Entering state 129
Reducing stack by rule 176 (line 371):
   $1 = nterm selection_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 54 110 202 271 305 54
Entering state 122
Reducing stack by rule 187 (line 395):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 54 110 202 271 305 54
Entering state 126
Reducing stack by rule 184 (line 389):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 54 110 202 271 305 54
Entering state 125
Reading a token: Next token is token '}' ()
Shifting token '}' ()
Entering state 211
Reducing stack by rule 182 (line 383):
   $1 = token '{' ()
   $2 = nterm block_item_list ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 29 23 38 54 110 202 271 305
Entering state 124
Reducing stack by rule 174 (line 369):
   $1 = nterm compound_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 54 110 202 271 305
Entering state 322
Reducing stack by rule 189 (line 403):
   $1 = token IF ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm statement ()
-> $$ = nterm selection_statement_base ()
Stack now 0 29 23 38 54
Entering state 128
Reading a token: Next token is token RETURN ()
Reducing stack by rule 190 (line 407):
   $1 = nterm selection_statement_base ()
-> $$ = nterm selection_statement ()
Stack now 0 29 23 38 54
Entering state 129
Reducing stack by rule 176 (line 371):
   $1 = nterm selection_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 54
Entering state 122
Reducing stack by rule 187 (line 395):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 54
Entering state 126
Reducing stack by rule 184 (line 389):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 54
Entering state 125
Next token is token RETURN ()
Shifting token RETURN ()
Entering state 115
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 115
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 115
Entering state 88
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 161
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 115 88 161
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 115 88 161
Entering state 88
Reading a token: Next token is token ']' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 115 88 161
Entering state 89
Next token is token ']' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 115 88 161
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 115 88 161
Entering state 92
Next token is token ']' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 115 88 161
Entering state 93
Next token is token ']' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 115 88 161
Entering state 94
Next token is token ']' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 115 88 161
Entering state 95
Next token is token ']' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 115 88 161
Entering state 96
Next token is token ']' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 115 88 161
Entering state 97
Next token is token ']' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 115 88 161
Entering state 98
Next token is token ']' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 115 88 161
Entering state 99
Next token is token ']' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 115 88 161
Entering state 100
Next token is token ']' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 115 88 161
Entering state 101
Next token is token ']' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 115 88 161
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 115 88 161
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 54 125 115 88 161
Entering state 246
Next token is token ']' ()
Shifting token ']' ()
Entering state 301
Reducing stack by rule 10 (line 43):
   $1 = nterm postfix_expression ()
   $2 = token '[' ()
   $3 = nterm expression ()
   $4 = token ']' ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 115
Entering state 88
Reading a token: Next token is token ';' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 115
Entering state 89
Next token is token ';' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 115
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 115
Entering state 92
Next token is token ';' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 115
Entering state 93
Next token is token ';' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 115
Entering state 94
Next token is token ';' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 115
Entering state 95
Next token is token ';' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 115
Entering state 96
Next token is token ';' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 115
Entering state 97
Next token is token ';' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 115
Entering state 98
Next token is token ';' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 115
Entering state 99
Next token is token ';' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 115
Entering state 100
Next token is token ';' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 115
Entering state 101
Next token is token ';' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 115
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 115
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 54 125 115
Entering state 120
Next token is token ';' ()
Reducing stack by rule 79 (line 169):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 54 125 115
Entering state 207
Next token is token ';' ()
Shifting token ';' ()
Entering state 277
Reducing stack by rule 200 (line 423):
   $1 = token RETURN ()
   $2 = nterm expression_opt ()
   $3 = token ';' ()
-> $$ = nterm jump_statement ()
Stack now 0 29 23 38 54 125
Entering state 131
Reducing stack by rule 178 (line 373):
   $1 = nterm jump_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 54 125
Entering state 122
Reducing stack by rule 187 (line 395):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 54 125
Entering state 212
Reducing stack by rule 185 (line 390):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 54
Entering state 125
Reading a token: Next token is token '}' ()
Shifting token '}' ()
Entering state 211
Reducing stack by rule 182 (line 383):
   $1 = token '{' ()
   $2 = nterm block_item_list ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 29 23 38
Entering state 57
Reducing stack by rule 206 (line 438):
   $1 = nterm declaration_specifiers ()
   $2 = nterm declarator ()
   $3 = nterm compound_statement ()
-> $$ = nterm function_definition ()
Stack now 0 29
Entering state 31
Reducing stack by rule 203 (line 432):
   $1 = nterm function_definition ()
-> $$ = nterm external_declaration ()
Stack now 0 29
Entering state 46
Reducing stack by rule 202 (line 428):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 29
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 9
Reducing stack by rule 105 (line 221):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 29
Entering state 25
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 193):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29
Entering state 23
Next token is token IDENTIFIER ()
Reducing stack by rule 143 (line 294):
-> $$ = nterm pointer_opt ()
Stack now 0 29 23
Entering state 39
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 59
Reducing stack by rule 133 (line 281):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 29 23 39
Entering state 61
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 135
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 9
Reducing stack by rule 105 (line 221):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 29 23 39 61 135
Entering state 25
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 193):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29 23 39 61 135
Entering state 216
Next token is token IDENTIFIER ()
Reducing stack by rule 143 (line 294):
-> $$ = nterm pointer_opt ()
Stack now 0 29 23 39 61 135 216
Entering state 39
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 59
Reducing stack by rule 133 (line 281):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 29 23 39 61 135 216 39
Entering state 61
Reading a token: Next token is token ',' ()
Reducing stack by rule 132 (line 276):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 29 23 39 61 135 216
Entering state 281
Reducing stack by rule 154 (line 322):
   $1 = nterm declaration_specifiers ()
   $2 = nterm declarator ()
-> $$ = nterm parameter_declaration ()
Stack now 0 29 23 39 61 135
Entering state 219
Reducing stack by rule 152 (line 317):
   $1 = nterm parameter_declaration ()
-> $$ = nterm parameter_list ()
Stack now 0 29 23 39 61 135
Entering state 218
Next token is token ',' ()
Shifting token ',' ()
Entering state 283
Reading a token: Next token is token CHAR ()
Shifting token CHAR ()
Entering state 7
Reducing stack by rule 103 (line 219):
   $1 = token CHAR ()
-> $$ = nterm type_specifier ()
Stack now 0 29 23 39 61 135 218 283
Entering state 25
Reading a token: Next token is token '*' ()
Reducing stack by rule 89 (line 193):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29 23 39 61 135 218 283
Entering state 216
Next token is token '*' ()
Shifting token '*' ()
Entering state 34
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 147 (line 304):
-> $$ = nterm type_qualifier_list_opt ()
Stack now 0 29 23 39 61 135 218 283 216 34
Entering state 49
Next token is token IDENTIFIER ()
Reducing stack by rule 144 (line 298):
   $1 = token '*' ()
   $2 = nterm type_qualifier_list_opt ()
-> $$ = nterm pointer ()
Stack now 0 29 23 39 61 135 218 283 216
Entering state 40
Reducing stack by rule 142 (line 293):
   $1 = nterm pointer ()
-> $$ = nterm pointer_opt ()
Stack now 0 29 23 39 61 135 218 283 216
Entering state 39
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 59
Reducing stack by rule 133 (line 281):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 29 23 39 61 135 218 283 216 39
Entering state 61
Reading a token: Next token is token ')' ()
Reducing stack by rule 132 (line 276):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 29 23 39 61 135 218 283 216
Entering state 281
Reducing stack by rule 154 (line 322):
   $1 = nterm declaration_specifiers ()
   $2 = nterm declarator ()
-> $$ = nterm parameter_declaration ()
Stack now 0 29 23 39 61 135 218 283
Entering state 311
Reducing stack by rule 153 (line 318):
   $1 = nterm parameter_list ()
   $2 = token ',' ()
   $3 = nterm parameter_declaration ()
-> $$ = nterm parameter_list ()
Stack now 0 29 23 39 61 135
Entering state 218
Next token is token ')' ()
Reducing stack by rule 150 (line 313):
   $1 = nterm parameter_list ()
-> $$ = nterm parameter_type_list ()
Stack now 0 29 23 39 61 135
Entering state 217
Next token is token ')' ()
Shifting token ')' ()
Entering state 282
Reducing stack by rule 140 (line 288):
   $1 = nterm direct_declarator ()
   $2 = token '(' ()
   $3 = nterm parameter_type_list ()
   $4 = token ')' ()
-> $$ = nterm direct_declarator ()
Stack now 0 29 23 39
Entering state 61
Reading a token: Next token is token '{' ()
Reducing stack by rule 132 (line 276):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 29 23
Entering state 38
Next token is token '{' ()
Shifting token '{' ()
Entering state 54
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 9
Reducing stack by rule 105 (line 221):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 29 23 38 54
Entering state 25
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 193):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29 23 38 54
Entering state 56
Next token is token IDENTIFIER ()
Reducing stack by rule 143 (line 294):
-> $$ = nterm pointer_opt ()
Stack now 0 29 23 38 54 56
Entering state 39
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 59
Reducing stack by rule 133 (line 281):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 29 23 38 54 56 39
Entering state 61
Reading a token: Next token is token ',' ()
Reducing stack by rule 132 (line 276):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 29 23 38 54 56
Entering state 68
Next token is token ',' ()
Reducing stack by rule 96 (line 206):
   $1 = nterm declarator ()
-> $$ = nterm init_declarator ()
Stack now 0 29 23 38 54 56
Entering state 37
Reducing stack by rule 94 (line 201):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 29 23 38 54 56
Entering state 36
Next token is token ',' ()
Shifting token ',' ()
Entering state 51
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 143 (line 294):
-> $$ = nterm pointer_opt ()
Stack now 0 29 23 38 54 56 36 51
Entering state 39
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 59
Reducing stack by rule 133 (line 281):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 29 23 38 54 56 36 51 39
Entering state 61
Reading a token: Next token is token ASSIGN ()
Reducing stack by rule 132 (line 276):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 29 23 38 54 56 36 51
Entering state 68
Next token is token ASSIGN ()
Shifting token ASSIGN ()
Entering state 53
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 72
Reducing stack by rule 5 (line 36):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 54 56 36 51 68 53
Entering state 87
Reducing stack by rule 2 (line 29):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 56 36 51 68 53
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 56 36 51 68 53
Entering state 88
Reading a token: Next token is token ';' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 56 36 51 68 53
Entering state 89
Next token is token ';' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 56 36 51 68 53
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 56 36 51 68 53
Entering state 92
Next token is token ';' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 56 36 51 68 53
Entering state 93
Next token is token ';' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 56 36 51 68 53
Entering state 94
Next token is token ';' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 56 36 51 68 53
Entering state 95
Next token is token ';' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 56 36 51 68 53
Entering state 96
Next token is token ';' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 56 36 51 68 53
Entering state 97
Next token is token ';' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 56 36 51 68 53
Entering state 98
Next token is token ';' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 56 36 51 68 53
Entering state 99
Next token is token ';' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 56 36 51 68 53
Entering state 100
Next token is token ';' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 56 36 51 68 53
Entering state 101
Next token is token ';' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 56 36 51 68 53
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 56 36 51 68 53
Entering state 103
Reducing stack by rule 161 (line 341):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 29 23 38 54 56 36 51 68 53
Entering state 104
Reducing stack by rule 97 (line 207):
   $1 = nterm declarator ()
   $2 = token ASSIGN ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 29 23 38 54 56 36 51
Entering state 67
Reducing stack by rule 95 (line 202):
   $1 = nterm init_declarator_list ()
   $2 = token ',' ()
   $3 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 29 23 38 54 56
Entering state 36
Next token is token ';' ()
Shifting token ';' ()
Entering state 52
Reducing stack by rule 84 (line 183):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 29 23 38 54
Entering state 121
Reducing stack by rule 186 (line 394):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 54
Entering state 126
Reducing stack by rule 184 (line 389):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 54
Entering state 125
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 116
Reading a token: Next token is token ASSIGN ()
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125
Entering state 88
Next token is token ASSIGN ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125
Entering state 89
Next token is token ASSIGN ()
Shifting token ASSIGN ()
Entering state 163
Reducing stack by rule 68 (line 155):
   $1 = token ASSIGN ()
-> $$ = nterm assignment_operator ()
Stack now 0 29 23 38 54 125 89
Entering state 174
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 72
Reducing stack by rule 5 (line 36):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 54 125 89 174
Entering state 87
Reducing stack by rule 2 (line 29):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 88
Reading a token: Next token is token ';' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 89
Next token is token ';' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 92
Next token is token ';' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 93
Next token is token ';' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 94
Next token is token ';' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 95
Next token is token ';' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 96
Next token is token ';' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 97
Next token is token ';' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 98
Next token is token ';' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 99
Next token is token ';' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 100
Next token is token ';' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 101
Next token is token ';' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 248
Reducing stack by rule 67 (line 151):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 54 125
Entering state 120
Next token is token ';' ()
Reducing stack by rule 79 (line 169):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 54 125
Entering state 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 209
Reducing stack by rule 188 (line 399):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 29 23 38 54 125
Entering state 127
Reducing stack by rule 175 (line 370):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 54 125
Entering state 122
Reducing stack by rule 187 (line 395):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 54 125
Entering state 212
Reducing stack by rule 185 (line 390):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 54
Entering state 125
Reading a token: Next token is token CONST ()
Shifting token CONST ()
Entering state 15
Reducing stack by rule 128 (line 266):
   $1 = token CONST ()
-> $$ = nterm type_qualifier ()
Stack now 0 29 23 38 54 125
Entering state 27
Reading a token: Next token is token SHORT ()
Shifting token SHORT ()
Entering state 8
Reducing stack by rule 104 (line 220):
   $1 = token SHORT ()
-> $$ = nterm type_specifier ()
Stack now 0 29 23 38 54 125 27
Entering state 25
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 193):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29 23 38 54 125 27
Entering state 43
Reducing stack by rule 90 (line 194):
   $1 = nterm type_qualifier ()
   $2 = nterm declaration_specifiers ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29 23 38 54 125
Entering state 56
Next token is token IDENTIFIER ()
Reducing stack by rule 143 (line 294):
-> $$ = nterm pointer_opt ()
Stack now 0 29 23 38 54 125 56
Entering state 39
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 59
Reducing stack by rule 133 (line 281):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 29 23 38 54 125 56 39
Entering state 61
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 136
Reading a token: Next token is token ']' ()
Reducing stack by rule 147 (line 304):
-> $$ = nterm type_qualifier_list_opt ()
Stack now 0 29 23 38 54 125 56 39 61 136
Entering state 223
Next token is token ']' ()
Shifting token ']' ()
Entering state 287
Reducing stack by rule 136 (line 284):
   $1 = nterm direct_declarator ()
   $2 = token '[' ()
   $3 = nterm type_qualifier_list_opt ()
   $4 = token ']' ()
-> $$ = nterm direct_declarator ()
Stack now 0 29 23 38 54 125 56 39
Entering state 61
Reading a token: Next token is token ASSIGN ()
Reducing stack by rule 132 (line 276):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 29 23 38 54 125 56
Entering state 68
Next token is token ASSIGN ()
Shifting token ASSIGN ()
Entering state 53
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 80
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 72
Reducing stack by rule 5 (line 36):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 54 125 56 68 53 80
Entering state 87
Reducing stack by rule 2 (line 29):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80
Entering state 88
Reading a token: Next token is token ',' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80
Entering state 89
Next token is token ',' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80
Entering state 92
Next token is token ',' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80
Entering state 93
Next token is token ',' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80
Entering state 94
Next token is token ',' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80
Entering state 95
Next token is token ',' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80
Entering state 96
Next token is token ',' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80
Entering state 97
Next token is token ',' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80
Entering state 98
Next token is token ',' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80
Entering state 99
Next token is token ',' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80
Entering state 100
Next token is token ',' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80
Entering state 101
Next token is token ',' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80
Entering state 103
Reducing stack by rule 161 (line 341):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 29 23 38 54 125 56 68 53 80
Entering state 152
Reducing stack by rule 164 (line 347):
   $1 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 29 23 38 54 125 56 68 53 80
Entering state 153
Next token is token ',' ()
Shifting token ',' ()
Entering state 238
Reading a token: Next token is token '-' ()
Shifting token '-' ()
Entering state 83
Reducing stack by rule 31 (line 76):
   $1 = token '-' ()
-> $$ = nterm unary_operator ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238
Entering state 90
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 72
Reducing stack by rule 5 (line 36):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238 90
Entering state 87
Reducing stack by rule 2 (line 29):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238 90
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238 90
Entering state 88
Reading a token: Next token is token ',' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238 90
Entering state 175
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238 90
Entering state 176
Reducing stack by rule 25 (line 67):
   $1 = nterm unary_operator ()
   $2 = nterm cast_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238
Entering state 89
Next token is token ',' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238
Entering state 92
Next token is token ',' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238
Entering state 93
Next token is token ',' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238
Entering state 94
Next token is token ',' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238
Entering state 95
Next token is token ',' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238
Entering state 96
Next token is token ',' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238
Entering state 97
Next token is token ',' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238
Entering state 98
Next token is token ',' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238
Entering state 99
Next token is token ',' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238
Entering state 100
Next token is token ',' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238
Entering state 101
Next token is token ',' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238
Entering state 103
Reducing stack by rule 161 (line 341):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238
Entering state 297
Reducing stack by rule 166 (line 349):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 29 23 38 54 125 56 68 53 80
Entering state 153
Next token is token ',' ()
Shifting token ',' ()
Entering state 238
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 72
Reducing stack by rule 5 (line 36):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238
Entering state 87
Reducing stack by rule 2 (line 29):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238
Entering state 88
Reading a token: Next token is token ',' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238
Entering state 89
Next token is token ',' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238
Entering state 92
Next token is token ',' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238
Entering state 93
Next token is token ',' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238
Entering state 94
Next token is token ',' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238
Entering state 95
Next token is token ',' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238
Entering state 96
Next token is token ',' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238
Entering state 97
Next token is token ',' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238
Entering state 98
Next token is token ',' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238
Entering state 99
Next token is token ',' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238
Entering state 100
Next token is token ',' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238
Entering state 101
Next token is token ',' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238
Entering state 103
Reducing stack by rule 161 (line 341):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238
Entering state 297
Reducing stack by rule 166 (line 349):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 29 23 38 54 125 56 68 53 80
Entering state 153
Next token is token ',' ()
Shifting token ',' ()
Entering state 238
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 72
Reducing stack by rule 5 (line 36):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238
Entering state 87
Reducing stack by rule 2 (line 29):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238
Entering state 88
Reading a token: Next token is token '}' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238
Entering state 89
Next token is token '}' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238
Entering state 92
Next token is token '}' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238
Entering state 93
Next token is token '}' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238
Entering state 94
Next token is token '}' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238
Entering state 95
Next token is token '}' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238
Entering state 96
Next token is token '}' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238
Entering state 97
Next token is token '}' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238
Entering state 98
Next token is token '}' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238
Entering state 99
Next token is token '}' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238
Entering state 100
Next token is token '}' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238
Entering state 101
Next token is token '}' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238
Entering state 103
Reducing stack by rule 161 (line 341):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 29 23 38 54 125 56 68 53 80 153 238
Entering state 297
Reducing stack by rule 166 (line 349):
   $1 = nterm initializer_list ()
   $2 = token ',' ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 29 23 38 54 125 56 68 53 80
Entering state 153
Next token is token '}' ()
Shifting token '}' ()
Entering state 237
Reducing stack by rule 162 (line 342):
   $1 = token '{' ()
   $2 = nterm initializer_list ()
   $3 = token '}' ()
-> $$ = nterm initializer ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 104
Reducing stack by rule 97 (line 207):
   $1 = nterm declarator ()
   $2 = token ASSIGN ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 29 23 38 54 125 56
Entering state 37
Reducing stack by rule 94 (line 201):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 29 23 38 54 125 56
Entering state 36
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 52
Reducing stack by rule 84 (line 183):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 29 23 38 54 125
Entering state 121
Reducing stack by rule 186 (line 394):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 54 125
Entering state 212
Reducing stack by rule 185 (line 390):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 54
Entering state 125
Reading a token: Next token is token VOLATILE ()
Shifting token VOLATILE ()
Entering state 16
Reducing stack by rule 130 (line 268):
   $1 = token VOLATILE ()
-> $$ = nterm type_qualifier ()
Stack now 0 29 23 38 54 125
Entering state 27
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 9
Reducing stack by rule 105 (line 221):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 29 23 38 54 125 27
Entering state 25
Reading a token: Next token is token '*' ()
Reducing stack by rule 89 (line 193):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29 23 38 54 125 27
Entering state 43
Reducing stack by rule 90 (line 194):
   $1 = nterm type_qualifier ()
   $2 = nterm declaration_specifiers ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29 23 38 54 125
Entering state 56
Next token is token '*' ()
Shifting token '*' ()
Entering state 34
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 147 (line 304):
-> $$ = nterm type_qualifier_list_opt ()
Stack now 0 29 23 38 54 125 56 34
Entering state 49
Next token is token IDENTIFIER ()
Reducing stack by rule 144 (line 298):
   $1 = token '*' ()
   $2 = nterm type_qualifier_list_opt ()
-> $$ = nterm pointer ()
Stack now 0 29 23 38 54 125 56
Entering state 40
Reducing stack by rule 142 (line 293):
   $1 = nterm pointer ()
-> $$ = nterm pointer_opt ()
Stack now 0 29 23 38 54 125 56
Entering state 39
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 59
Reducing stack by rule 133 (line 281):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 29 23 38 54 125 56 39
Entering state 61
Reading a token: Next token is token ASSIGN ()
Reducing stack by rule 132 (line 276):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 29 23 38 54 125 56
Entering state 68
Next token is token ASSIGN ()
Shifting token ASSIGN ()
Entering state 53
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 72
Reducing stack by rule 5 (line 36):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 87
Reducing stack by rule 2 (line 29):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 88
Reading a token: Next token is token ';' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 89
Next token is token ';' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 92
Next token is token ';' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 93
Next token is token ';' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 94
Next token is token ';' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 95
Next token is token ';' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 96
Next token is token ';' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 97
Next token is token ';' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 98
Next token is token ';' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 99
Next token is token ';' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 100
Next token is token ';' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 101
Next token is token ';' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 103
Reducing stack by rule 161 (line 341):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 104
Reducing stack by rule 97 (line 207):
   $1 = nterm declarator ()
   $2 = token ASSIGN ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 29 23 38 54 125 56
Entering state 37
Reducing stack by rule 94 (line 201):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 29 23 38 54 125 56
Entering state 36
Next token is token ';' ()
Shifting token ';' ()
Entering state 52
Reducing stack by rule 84 (line 183):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 29 23 38 54 125
Entering state 121
Reducing stack by rule 186 (line 394):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 54 125
Entering state 212
Reducing stack by rule 185 (line 390):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 54
Entering state 125
Reading a token: Next token is token CHAR ()
Shifting token CHAR ()
Entering state 7
Reducing stack by rule 103 (line 219):
   $1 = token CHAR ()
-> $$ = nterm type_specifier ()
Stack now 0 29 23 38 54 125
Entering state 25
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 193):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29 23 38 54 125
Entering state 56
Next token is token IDENTIFIER ()
Reducing stack by rule 143 (line 294):
-> $$ = nterm pointer_opt ()
Stack now 0 29 23 38 54 125 56
Entering state 39
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 59
Reducing stack by rule 133 (line 281):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 29 23 38 54 125 56 39
Entering state 61
Reading a token: Next token is token '[' ()
Shifting token '[' ()
Entering state 136
Reading a token: Next token is token ']' ()
Reducing stack by rule 147 (line 304):
-> $$ = nterm type_qualifier_list_opt ()
Stack now 0 29 23 38 54 125 56 39 61 136
Entering state 223
Next token is token ']' ()
Shifting token ']' ()
Entering state 287
Reducing stack by rule 136 (line 284):
   $1 = nterm direct_declarator ()
   $2 = token '[' ()
   $3 = nterm type_qualifier_list_opt ()
   $4 = token ']' ()
-> $$ = nterm direct_declarator ()
Stack now 0 29 23 38 54 125 56 39
Entering state 61
Reading a token: Next token is token ASSIGN ()
Reducing stack by rule 132 (line 276):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 29 23 38 54 125 56
Entering state 68
Next token is token ASSIGN ()
Shifting token ASSIGN ()
Entering state 53
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 80
Reading a token: Next token is token CHAR_CONSTANT ()
Shifting token CHAR_CONSTANT ()
Entering state 75
Reducing stack by rule 8 (line 39):
   $1 = token CHAR_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 54 125 56 68 53 80
Entering state 87
Reducing stack by rule 2 (line 29):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80
Entering state 88
Reading a token: Next token is token '}' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80
Entering state 89
Next token is token '}' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80
Entering state 92
Next token is token '}' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80
Entering state 93
Next token is token '}' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80
Entering state 94
Next token is token '}' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80
Entering state 95
Next token is token '}' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80
Entering state 96
Next token is token '}' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80
Entering state 97
Next token is token '}' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80
Entering state 98
Next token is token '}' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80
Entering state 99
Next token is token '}' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80
Entering state 100
Next token is token '}' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80
Entering state 101
Next token is token '}' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 56 68 53 80
Entering state 103
Reducing stack by rule 161 (line 341):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 29 23 38 54 125 56 68 53 80
Entering state 152
Reducing stack by rule 164 (line 347):
   $1 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 29 23 38 54 125 56 68 53 80
Entering state 153
Next token is token '}' ()
Shifting token '}' ()
Entering state 237
Reducing stack by rule 162 (line 342):
   $1 = token '{' ()
   $2 = nterm initializer_list ()
   $3 = token '}' ()
-> $$ = nterm initializer ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 104
Reducing stack by rule 97 (line 207):
   $1 = nterm declarator ()
   $2 = token ASSIGN ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 29 23 38 54 125 56
Entering state 37
Reducing stack by rule 94 (line 201):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 29 23 38 54 125 56
Entering state 36
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 52
Reducing stack by rule 84 (line 183):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 29 23 38 54 125
Entering state 121
Reducing stack by rule 186 (line 394):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 54 125
Entering state 212
Reducing stack by rule 185 (line 390):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 54
Entering state 125
Reading a token: Next token is token FLOAT ()
Shifting token FLOAT ()
Entering state 13
Reducing stack by rule 107 (line 223):
   $1 = token FLOAT ()
-> $$ = nterm type_specifier ()
Stack now 0 29 23 38 54 125
Entering state 25
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 193):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29 23 38 54 125
Entering state 56
Next token is token IDENTIFIER ()
Reducing stack by rule 143 (line 294):
-> $$ = nterm pointer_opt ()
Stack now 0 29 23 38 54 125 56
Entering state 39
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 59
Reducing stack by rule 133 (line 281):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 29 23 38 54 125 56 39
Entering state 61
Reading a token: Next token is token ASSIGN ()
Reducing stack by rule 132 (line 276):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 29 23 38 54 125 56
Entering state 68
Next token is token ASSIGN ()
Shifting token ASSIGN ()
Entering state 53
Reading a token: Next token is token SIZEOF ()
Shifting token SIZEOF ()
Entering state 69
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 140
Reading a token: Next token is token FLOAT ()
Shifting token FLOAT ()
Entering state 13
Reducing stack by rule 107 (line 223):
   $1 = token FLOAT ()
-> $$ = nterm type_specifier ()
Stack now 0 29 23 38 54 125 56 68 53 69 140
Entering state 146
Reading a token: Next token is token ')' ()
Reducing stack by rule 116 (line 235):
-> $$ = nterm specifier_qualifier_list_opt ()
Stack now 0 29 23 38 54 125 56 68 53 69 140 146
Entering state 231
Reducing stack by rule 117 (line 239):
   $1 = nterm type_specifier ()
   $2 = nterm specifier_qualifier_list_opt ()
-> $$ = nterm specifier_qualifier_list ()
Stack now 0 29 23 38 54 125 56 68 53 69 140
Entering state 147
Reducing stack by rule 160 (line 337):
   $1 = nterm specifier_qualifier_list ()
-> $$ = nterm type_name ()
Stack now 0 29 23 38 54 125 56 68 53 69 140
Entering state 228
Next token is token ')' ()
Shifting token ')' ()
Entering state 291
Reading a token: Next token is token '/' ()
Reducing stack by rule 27 (line 69):
   $1 = token SIZEOF ()
   $2 = token '(' ()
   $3 = nterm type_name ()
   $4 = token ')' ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 89
Next token is token '/' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 92
Next token is token '/' ()
Shifting token '/' ()
Entering state 178
Reading a token: Next token is token FLOATING_CONSTANT ()
Shifting token FLOATING_CONSTANT ()
Entering state 73
Reducing stack by rule 6 (line 37):
   $1 = token FLOATING_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 54 125 56 68 53 92 178
Entering state 87
Reducing stack by rule 2 (line 29):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 56 68 53 92 178
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 56 68 53 92 178
Entering state 88
Reading a token: Next token is token ';' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 56 68 53 92 178
Entering state 175
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 56 68 53 92 178
Entering state 250
Reducing stack by rule 38 (line 89):
   $1 = nterm multiplicative_expression ()
   $2 = token '/' ()
   $3 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 92
Next token is token ';' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 93
Next token is token ';' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 94
Next token is token ';' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 95
Next token is token ';' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 96
Next token is token ';' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 97
Next token is token ';' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 98
Next token is token ';' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 99
Next token is token ';' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 100
Next token is token ';' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 101
Next token is token ';' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 103
Reducing stack by rule 161 (line 341):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 104
Reducing stack by rule 97 (line 207):
   $1 = nterm declarator ()
   $2 = token ASSIGN ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 29 23 38 54 125 56
Entering state 37
Reducing stack by rule 94 (line 201):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 29 23 38 54 125 56
Entering state 36
Next token is token ';' ()
Shifting token ';' ()
Entering state 52
Reducing stack by rule 84 (line 183):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 29 23 38 54 125
Entering state 121
Reducing stack by rule 186 (line 394):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 54 125
Entering state 212
Reducing stack by rule 185 (line 390):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 54
Entering state 125
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 116
Reading a token: Next token is token '(' ()
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125
Entering state 88
Next token is token '(' ()
Shifting token '(' ()
Entering state 160
Reading a token: Next token is token STRING_LITERAL ()
Shifting token STRING_LITERAL ()
Entering state 71
Reducing stack by rule 3 (line 30):
   $1 = token STRING_LITERAL ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 88 160
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 88 160
Entering state 88
Reading a token: Next token is token ')' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 88 160
Entering state 89
Next token is token ')' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 88 160
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 88 160
Entering state 92
Next token is token ')' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 88 160
Entering state 93
Next token is token ')' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 88 160
Entering state 94
Next token is token ')' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 88 160
Entering state 95
Next token is token ')' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 88 160
Entering state 96
Next token is token ')' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 88 160
Entering state 97
Next token is token ')' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 88 160
Entering state 98
Next token is token ')' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 88 160
Entering state 99
Next token is token ')' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 88 160
Entering state 100
Next token is token ')' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 88 160
Entering state 101
Next token is token ')' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 88 160
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 88 160
Entering state 245
Reducing stack by rule 20 (line 59):
   $1 = nterm assignment_expression ()
-> $$ = nterm argument_expression_list ()
Stack now 0 29 23 38 54 125 88 160
Entering state 244
Next token is token ')' ()
Reducing stack by rule 18 (line 54):
   $1 = nterm argument_expression_list ()
-> $$ = nterm argument_expression_list_opt ()
Stack now 0 29 23 38 54 125 88 160
Entering state 243
Next token is token ')' ()
Shifting token ')' ()
Entering state 299
Reducing stack by rule 11 (line 44):
   $1 = nterm postfix_expression ()
   $2 = token '(' ()
   $3 = nterm argument_expression_list_opt ()
   $4 = token ')' ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125
Entering state 88
Reading a token: Next token is token ';' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125
Entering state 89
Next token is token ';' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125
Entering state 92
Next token is token ';' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125
Entering state 93
Next token is token ';' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125
Entering state 94
Next token is token ';' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125
Entering state 95
Next token is token ';' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125
Entering state 96
Next token is token ';' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125
Entering state 97
Next token is token ';' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125
Entering state 98
Next token is token ';' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125
Entering state 99
Next token is token ';' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125
Entering state 100
Next token is token ';' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125
Entering state 101
Next token is token ';' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 54 125
Entering state 120
Next token is token ';' ()
Reducing stack by rule 79 (line 169):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 54 125
Entering state 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 209
Reducing stack by rule 188 (line 399):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 29 23 38 54 125
Entering state 127
Reducing stack by rule 175 (line 370):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 54 125
Entering state 122
Reducing stack by rule 187 (line 395):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 54 125
Entering state 212
Reducing stack by rule 185 (line 390):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 54
Entering state 125
Reading a token: Next token is token AUTO ()
Shifting token AUTO ()
Entering state 3
Reducing stack by rule 100 (line 213):
   $1 = token AUTO ()
-> $$ = nterm storage_class_specifier ()
Stack now 0 29 23 38 54 125
Entering state 24
Reading a token: Next token is token FLOAT ()
Shifting token FLOAT ()
Entering state 13
Reducing stack by rule 107 (line 223):
   $1 = token FLOAT ()
-> $$ = nterm type_specifier ()
Stack now 0 29 23 38 54 125 24
Entering state 25
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 193):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29 23 38 54 125 24
Entering state 41
Reducing stack by rule 86 (line 190):
   $1 = nterm storage_class_specifier ()
   $2 = nterm declaration_specifiers ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29 23 38 54 125
Entering state 56
Next token is token IDENTIFIER ()
Reducing stack by rule 143 (line 294):
-> $$ = nterm pointer_opt ()
Stack now 0 29 23 38 54 125 56
Entering state 39
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 59
Reducing stack by rule 133 (line 281):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 29 23 38 54 125 56 39
Entering state 61
Reading a token: Next token is token ASSIGN ()
Reducing stack by rule 132 (line 276):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 29 23 38 54 125 56
Entering state 68
Next token is token ASSIGN ()
Shifting token ASSIGN ()
Entering state 53
Reading a token: Next token is token '-' ()
Shifting token '-' ()
Entering state 83
Reducing stack by rule 31 (line 76):
   $1 = token '-' ()
-> $$ = nterm unary_operator ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 90
Reading a token: Next token is token FLOATING_CONSTANT ()
Shifting token FLOATING_CONSTANT ()
Entering state 73
Reducing stack by rule 6 (line 37):
   $1 = token FLOATING_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 54 125 56 68 53 90
Entering state 87
Reducing stack by rule 2 (line 29):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 56 68 53 90
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 56 68 53 90
Entering state 88
Reading a token: Next token is token ';' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 56 68 53 90
Entering state 175
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 56 68 53 90
Entering state 176
Reducing stack by rule 25 (line 67):
   $1 = nterm unary_operator ()
   $2 = nterm cast_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 89
Next token is token ';' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 92
Next token is token ';' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 93
Next token is token ';' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 94
Next token is token ';' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 95
Next token is token ';' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 96
Next token is token ';' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 97
Next token is token ';' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 98
Next token is token ';' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 99
Next token is token ';' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 100
Next token is token ';' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 101
Next token is token ';' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 103
Reducing stack by rule 161 (line 341):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 104
Reducing stack by rule 97 (line 207):
   $1 = nterm declarator ()
   $2 = token ASSIGN ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 29 23 38 54 125 56
Entering state 37
Reducing stack by rule 94 (line 201):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 29 23 38 54 125 56
Entering state 36
Next token is token ';' ()
Shifting token ';' ()
Entering state 52
Reducing stack by rule 84 (line 183):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 29 23 38 54 125
Entering state 121
Reducing stack by rule 186 (line 394):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 54 125
Entering state 212
Reducing stack by rule 185 (line 390):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 54
Entering state 125
Reading a token: Next token is token EXTERN ()
Shifting token EXTERN ()
Entering state 1
Reducing stack by rule 98 (line 211):
   $1 = token EXTERN ()
-> $$ = nterm storage_class_specifier ()
Stack now 0 29 23 38 54 125
Entering state 24
Reading a token: Next token is token SHORT ()
Shifting token SHORT ()
Entering state 8
Reducing stack by rule 104 (line 220):
   $1 = token SHORT ()
-> $$ = nterm type_specifier ()
Stack now 0 29 23 38 54 125 24
Entering state 25
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 9
Reducing stack by rule 105 (line 221):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 29 23 38 54 125 24 25
Entering state 25
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 193):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29 23 38 54 125 24 25
Entering state 42
Reducing stack by rule 88 (line 192):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29 23 38 54 125 24
Entering state 41
Reducing stack by rule 86 (line 190):
   $1 = nterm storage_class_specifier ()
   $2 = nterm declaration_specifiers ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29 23 38 54 125
Entering state 56
Next token is token IDENTIFIER ()
Reducing stack by rule 143 (line 294):
-> $$ = nterm pointer_opt ()
Stack now 0 29 23 38 54 125 56
Entering state 39
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 59
Reducing stack by rule 133 (line 281):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 29 23 38 54 125 56 39
Entering state 61
Reading a token: Next token is token ASSIGN ()
Reducing stack by rule 132 (line 276):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 29 23 38 54 125 56
Entering state 68
Next token is token ASSIGN ()
Shifting token ASSIGN ()
Entering state 53
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 79
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 72
Reducing stack by rule 5 (line 36):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 54 125 56 68 53 79
Entering state 87
Reducing stack by rule 2 (line 29):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 56 68 53 79
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 56 68 53 79
Entering state 88
Reading a token: Next token is token BIT_XOR ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 56 68 53 79
Entering state 89
Next token is token BIT_XOR ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 56 68 53 79
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 56 68 53 79
Entering state 92
Next token is token BIT_XOR ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 56 68 53 79
Entering state 93
Next token is token BIT_XOR ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 56 68 53 79
Entering state 94
Next token is token BIT_XOR ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 56 68 53 79
Entering state 95
Next token is token BIT_XOR ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 56 68 53 79
Entering state 96
Next token is token BIT_XOR ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 56 68 53 79
Entering state 97
Next token is token BIT_XOR ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 56 68 53 79
Entering state 98
Next token is token BIT_XOR ()
Shifting token BIT_XOR ()
Entering state 191
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 72
Reducing stack by rule 5 (line 36):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 54 125 56 68 53 79 98 191
Entering state 87
Reducing stack by rule 2 (line 29):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 56 68 53 79 98 191
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 56 68 53 79 98 191
Entering state 88
Reading a token: Next token is token ')' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 56 68 53 79 98 191
Entering state 175
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 56 68 53 79 98 191
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 56 68 53 79 98 191
Entering state 92
Next token is token ')' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 56 68 53 79 98 191
Entering state 93
Next token is token ')' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 56 68 53 79 98 191
Entering state 94
Next token is token ')' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 56 68 53 79 98 191
Entering state 95
Next token is token ')' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 56 68 53 79 98 191
Entering state 96
Next token is token ')' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 56 68 53 79 98 191
Entering state 263
Next token is token ')' ()
Reducing stack by rule 57 (line 125):
   $1 = nterm exclusive_OR_expression ()
   $2 = token BIT_XOR ()
   $3 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 56 68 53 79
Entering state 98
Next token is token ')' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 56 68 53 79
Entering state 99
Next token is token ')' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 56 68 53 79
Entering state 100
Next token is token ')' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 56 68 53 79
Entering state 101
Next token is token ')' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 56 68 53 79
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 56 68 53 79
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 54 125 56 68 53 79
Entering state 145
Next token is token ')' ()
Shifting token ')' ()
Entering state 230
Reducing stack by rule 4 (line 31):
   $1 = token '(' ()
   $2 = nterm expression ()
   $3 = token ')' ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 88
Reading a token: Next token is token BIT_OR ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 89
Next token is token BIT_OR ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 92
Next token is token BIT_OR ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 93
Next token is token BIT_OR ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 94
Next token is token BIT_OR ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 95
Next token is token BIT_OR ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 96
Next token is token BIT_OR ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 97
Next token is token BIT_OR ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 98
Next token is token BIT_OR ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 99
Next token is token BIT_OR ()
Shifting token BIT_OR ()
Entering state 192
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 72
Reducing stack by rule 5 (line 36):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 54 125 56 68 53 99 192
Entering state 87
Reducing stack by rule 2 (line 29):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 56 68 53 99 192
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 56 68 53 99 192
Entering state 88
Reading a token: Next token is token ';' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 56 68 53 99 192
Entering state 175
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 56 68 53 99 192
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 56 68 53 99 192
Entering state 92
Next token is token ';' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 56 68 53 99 192
Entering state 93
Next token is token ';' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 56 68 53 99 192
Entering state 94
Next token is token ';' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 56 68 53 99 192
Entering state 95
Next token is token ';' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 56 68 53 99 192
Entering state 96
Next token is token ';' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 56 68 53 99 192
Entering state 97
Next token is token ';' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 56 68 53 99 192
Entering state 264
Next token is token ';' ()
Reducing stack by rule 59 (line 130):
   $1 = nterm inclusive_OR_expression ()
   $2 = token BIT_OR ()
   $3 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 99
Next token is token ';' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 100
Next token is token ';' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 101
Next token is token ';' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 103
Reducing stack by rule 161 (line 341):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 104
Reducing stack by rule 97 (line 207):
   $1 = nterm declarator ()
   $2 = token ASSIGN ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 29 23 38 54 125 56
Entering state 37
Reducing stack by rule 94 (line 201):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 29 23 38 54 125 56
Entering state 36
Next token is token ';' ()
Shifting token ';' ()
Entering state 52
Reducing stack by rule 84 (line 183):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 29 23 38 54 125
Entering state 121
Reducing stack by rule 186 (line 394):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 54 125
Entering state 212
Reducing stack by rule 185 (line 390):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 54
Entering state 125
Reading a token: Next token is token STATIC ()
Shifting token STATIC ()
Entering state 2
Reducing stack by rule 99 (line 212):
   $1 = token STATIC ()
-> $$ = nterm storage_class_specifier ()
Stack now 0 29 23 38 54 125
Entering state 24
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 9
Reducing stack by rule 105 (line 221):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 29 23 38 54 125 24
Entering state 25
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 193):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29 23 38 54 125 24
Entering state 41
Reducing stack by rule 86 (line 190):
   $1 = nterm storage_class_specifier ()
   $2 = nterm declaration_specifiers ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29 23 38 54 125
Entering state 56
Next token is token IDENTIFIER ()
Reducing stack by rule 143 (line 294):
-> $$ = nterm pointer_opt ()
Stack now 0 29 23 38 54 125 56
Entering state 39
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 59
Reducing stack by rule 133 (line 281):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 29 23 38 54 125 56 39
Entering state 61
Reading a token: Next token is token ASSIGN ()
Reducing stack by rule 132 (line 276):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 29 23 38 54 125 56
Entering state 68
Next token is token ASSIGN ()
Shifting token ASSIGN ()
Entering state 53
Reading a token: Next token is token FLOATING_CONSTANT ()
Shifting token FLOATING_CONSTANT ()
Entering state 73
Reducing stack by rule 6 (line 37):
   $1 = token FLOATING_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 87
Reducing stack by rule 2 (line 29):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 88
Reading a token: Next token is token ';' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 89
Next token is token ';' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 92
Next token is token ';' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 93
Next token is token ';' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 94
Next token is token ';' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 95
Next token is token ';' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 96
Next token is token ';' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 97
Next token is token ';' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 98
Next token is token ';' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 99
Next token is token ';' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 100
Next token is token ';' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 101
Next token is token ';' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 103
Reducing stack by rule 161 (line 341):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 104
Reducing stack by rule 97 (line 207):
   $1 = nterm declarator ()
   $2 = token ASSIGN ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 29 23 38 54 125 56
Entering state 37
Reducing stack by rule 94 (line 201):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 29 23 38 54 125 56
Entering state 36
Next token is token ';' ()
Shifting token ';' ()
Entering state 52
Reducing stack by rule 84 (line 183):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 29 23 38 54 125
Entering state 121
Reducing stack by rule 186 (line 394):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 54 125
Entering state 212
Reducing stack by rule 185 (line 390):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 54
Entering state 125
Reading a token: Next token is token BOOL ()
Shifting token BOOL ()
Entering state 18
Reducing stack by rule 111 (line 227):
   $1 = token BOOL ()
-> $$ = nterm type_specifier ()
Stack now 0 29 23 38 54 125
Entering state 25
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 193):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29 23 38 54 125
Entering state 56
Next token is token IDENTIFIER ()
Reducing stack by rule 143 (line 294):
-> $$ = nterm pointer_opt ()
Stack now 0 29 23 38 54 125 56
Entering state 39
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 59
Reducing stack by rule 133 (line 281):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 29 23 38 54 125 56 39
Entering state 61
Reading a token: Next token is token ';' ()
Reducing stack by rule 132 (line 276):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 29 23 38 54 125 56
Entering state 68
Next token is token ';' ()
Reducing stack by rule 96 (line 206):
   $1 = nterm declarator ()
-> $$ = nterm init_declarator ()
Stack now 0 29 23 38 54 125 56
Entering state 37
Reducing stack by rule 94 (line 201):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 29 23 38 54 125 56
Entering state 36
Next token is token ';' ()
Shifting token ';' ()
Entering state 52
Reducing stack by rule 84 (line 183):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 29 23 38 54 125
Entering state 121
Reducing stack by rule 186 (line 394):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 54 125
Entering state 212
Reducing stack by rule 185 (line 390):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 54
Entering state 125
Reading a token: Next token is token COMPLEX ()
Shifting token COMPLEX ()
Entering state 19
Reducing stack by rule 112 (line 228):
   $1 = token COMPLEX ()
-> $$ = nterm type_specifier ()
Stack now 0 29 23 38 54 125
Entering state 25
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 193):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29 23 38 54 125
Entering state 56
Next token is token IDENTIFIER ()
Reducing stack by rule 143 (line 294):
-> $$ = nterm pointer_opt ()
Stack now 0 29 23 38 54 125 56
Entering state 39
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 59
Reducing stack by rule 133 (line 281):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 29 23 38 54 125 56 39
Entering state 61
Reading a token: Next token is token ';' ()
Reducing stack by rule 132 (line 276):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 29 23 38 54 125 56
Entering state 68
Next token is token ';' ()
Reducing stack by rule 96 (line 206):
   $1 = nterm declarator ()
-> $$ = nterm init_declarator ()
Stack now 0 29 23 38 54 125 56
Entering state 37
Reducing stack by rule 94 (line 201):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 29 23 38 54 125 56
Entering state 36
Next token is token ';' ()
Shifting token ';' ()
Entering state 52
Reducing stack by rule 84 (line 183):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 29 23 38 54 125
Entering state 121
Reducing stack by rule 186 (line 394):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 54 125
Entering state 212
Reducing stack by rule 185 (line 390):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 54
Entering state 125
Reading a token: Next token is token IMAGINARY ()
Shifting token IMAGINARY ()
Entering state 20
Reducing stack by rule 113 (line 229):
   $1 = token IMAGINARY ()
-> $$ = nterm type_specifier ()
Stack now 0 29 23 38 54 125
Entering state 25
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 193):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29 23 38 54 125
Entering state 56
Next token is token IDENTIFIER ()
Reducing stack by rule 143 (line 294):
-> $$ = nterm pointer_opt ()
Stack now 0 29 23 38 54 125 56
Entering state 39
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 59
Reducing stack by rule 133 (line 281):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 29 23 38 54 125 56 39
Entering state 61
Reading a token: Next token is token ';' ()
Reducing stack by rule 132 (line 276):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 29 23 38 54 125 56
Entering state 68
Next token is token ';' ()
Reducing stack by rule 96 (line 206):
   $1 = nterm declarator ()
-> $$ = nterm init_declarator ()
Stack now 0 29 23 38 54 125 56
Entering state 37
Reducing stack by rule 94 (line 201):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 29 23 38 54 125 56
Entering state 36
Next token is token ';' ()
Shifting token ';' ()
Entering state 52
Reducing stack by rule 84 (line 183):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 29 23 38 54 125
Entering state 121
Reducing stack by rule 186 (line 394):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 54 125
Entering state 212
Reducing stack by rule 185 (line 390):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 54
Entering state 125
Reading a token: Next token is token SIGNED ()
Shifting token SIGNED ()
Entering state 11
Reducing stack by rule 109 (line 225):
   $1 = token SIGNED ()
-> $$ = nterm type_specifier ()
Stack now 0 29 23 38 54 125
Entering state 25
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 9
Reducing stack by rule 105 (line 221):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 29 23 38 54 125 25
Entering state 25
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 193):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29 23 38 54 125 25
Entering state 42
Reducing stack by rule 88 (line 192):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29 23 38 54 125
Entering state 56
Next token is token IDENTIFIER ()
Reducing stack by rule 143 (line 294):
-> $$ = nterm pointer_opt ()
Stack now 0 29 23 38 54 125 56
Entering state 39
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 59
Reducing stack by rule 133 (line 281):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 29 23 38 54 125 56 39
Entering state 61
Reading a token: Next token is token ASSIGN ()
Reducing stack by rule 132 (line 276):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 29 23 38 54 125 56
Entering state 68
Next token is token ASSIGN ()
Shifting token ASSIGN ()
Entering state 53
Reading a token: Next token is token '-' ()
Shifting token '-' ()
Entering state 83
Reducing stack by rule 31 (line 76):
   $1 = token '-' ()
-> $$ = nterm unary_operator ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 90
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 56 68 53 90
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 56 68 53 90
Entering state 88
Reading a token: Next token is token ';' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 56 68 53 90
Entering state 175
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 56 68 53 90
Entering state 176
Reducing stack by rule 25 (line 67):
   $1 = nterm unary_operator ()
   $2 = nterm cast_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 89
Next token is token ';' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 92
Next token is token ';' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 93
Next token is token ';' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 94
Next token is token ';' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 95
Next token is token ';' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 96
Next token is token ';' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 97
Next token is token ';' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 98
Next token is token ';' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 99
Next token is token ';' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 100
Next token is token ';' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 101
Next token is token ';' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 103
Reducing stack by rule 161 (line 341):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 104
Reducing stack by rule 97 (line 207):
   $1 = nterm declarator ()
   $2 = token ASSIGN ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 29 23 38 54 125 56
Entering state 37
Reducing stack by rule 94 (line 201):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 29 23 38 54 125 56
Entering state 36
Next token is token ';' ()
Shifting token ';' ()
Entering state 52
Reducing stack by rule 84 (line 183):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 29 23 38 54 125
Entering state 121
Reducing stack by rule 186 (line 394):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 54 125
Entering state 212
Reducing stack by rule 185 (line 390):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 54
Entering state 125
Reading a token: Next token is token UNSIGNED ()
Shifting token UNSIGNED ()
Entering state 12
Reducing stack by rule 110 (line 226):
   $1 = token UNSIGNED ()
-> $$ = nterm type_specifier ()
Stack now 0 29 23 38 54 125
Entering state 25
Reading a token: Next token is token LONG ()
Shifting token LONG ()
Entering state 10
Reducing stack by rule 106 (line 222):
   $1 = token LONG ()
-> $$ = nterm type_specifier ()
Stack now 0 29 23 38 54 125 25
Entering state 25
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 193):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29 23 38 54 125 25
Entering state 42
Reducing stack by rule 88 (line 192):
   $1 = nterm type_specifier ()
   $2 = nterm declaration_specifiers ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29 23 38 54 125
Entering state 56
Next token is token IDENTIFIER ()
Reducing stack by rule 143 (line 294):
-> $$ = nterm pointer_opt ()
Stack now 0 29 23 38 54 125 56
Entering state 39
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 59
Reducing stack by rule 133 (line 281):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 29 23 38 54 125 56 39
Entering state 61
Reading a token: Next token is token ';' ()
Reducing stack by rule 132 (line 276):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 29 23 38 54 125 56
Entering state 68
Next token is token ';' ()
Reducing stack by rule 96 (line 206):
   $1 = nterm declarator ()
-> $$ = nterm init_declarator ()
Stack now 0 29 23 38 54 125 56
Entering state 37
Reducing stack by rule 94 (line 201):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 29 23 38 54 125 56
Entering state 36
Next token is token ';' ()
Shifting token ';' ()
Entering state 52
Reducing stack by rule 84 (line 183):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 29 23 38 54 125
Entering state 121
Reducing stack by rule 186 (line 394):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 54 125
Entering state 212
Reducing stack by rule 185 (line 390):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 54
Entering state 125
Reading a token: Next token is token ENUM ()
Shifting token ENUM ()
Entering state 21
Reading a token: Next token is token '{' ()
Reducing stack by rule 123 (line 252):
-> $$ = nterm identifier_opt ()
Stack now 0 29 23 38 54 125 21
Entering state 33
Next token is token '{' ()
Shifting token '{' ()
Entering state 47
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 62
Reading a token: Next token is token ',' ()
Reducing stack by rule 126 (line 261):
   $1 = token IDENTIFIER ()
-> $$ = nterm enumerator ()
Stack now 0 29 23 38 54 125 21 33 47
Entering state 64
Reducing stack by rule 124 (line 256):
   $1 = nterm enumerator ()
-> $$ = nterm enumerator_list ()
Stack now 0 29 23 38 54 125 21 33 47
Entering state 63
Next token is token ',' ()
Shifting token ',' ()
Entering state 139
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 62
Reading a token: Next token is token '}' ()
Reducing stack by rule 126 (line 261):
   $1 = token IDENTIFIER ()
-> $$ = nterm enumerator ()
Stack now 0 29 23 38 54 125 21 33 47 63 139
Entering state 227
Reducing stack by rule 125 (line 257):
   $1 = nterm enumerator_list ()
   $2 = token ',' ()
   $3 = nterm enumerator ()
-> $$ = nterm enumerator_list ()
Stack now 0 29 23 38 54 125 21 33 47
Entering state 63
Next token is token '}' ()
Shifting token '}' ()
Entering state 138
Reducing stack by rule 119 (line 245):
   $1 = token ENUM ()
   $2 = nterm identifier_opt ()
   $3 = token '{' ()
   $4 = nterm enumerator_list ()
   $5 = token '}' ()
-> $$ = nterm enum_specifier ()
Stack now 0 29 23 38 54 125
Entering state 26
Reducing stack by rule 114 (line 230):
   $1 = nterm enum_specifier ()
-> $$ = nterm type_specifier ()
Stack now 0 29 23 38 54 125
Entering state 25
Reading a token: Next token is token ';' ()
Reducing stack by rule 89 (line 193):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29 23 38 54 125
Entering state 56
Next token is token ';' ()
Shifting token ';' ()
Entering state 35
Reducing stack by rule 85 (line 184):
   $1 = nterm declaration_specifiers ()
   $2 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 29 23 38 54 125
Entering state 121
Reducing stack by rule 186 (line 394):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 54 125
Entering state 212
Reducing stack by rule 185 (line 390):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 54
Entering state 125
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 9
Reducing stack by rule 105 (line 221):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 29 23 38 54 125
Entering state 25
Reading a token: Next token is token '*' ()
Reducing stack by rule 89 (line 193):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29 23 38 54 125
Entering state 56
Next token is token '*' ()
Shifting token '*' ()
Entering state 34
Reading a token: Next token is token '*' ()
Reducing stack by rule 147 (line 304):
-> $$ = nterm type_qualifier_list_opt ()
Stack now 0 29 23 38 54 125 56 34
Entering state 49
Next token is token '*' ()
Shifting token '*' ()
Entering state 34
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 147 (line 304):
-> $$ = nterm type_qualifier_list_opt ()
Stack now 0 29 23 38 54 125 56 34 49 34
Entering state 49
Next token is token IDENTIFIER ()
Reducing stack by rule 144 (line 298):
   $1 = token '*' ()
   $2 = nterm type_qualifier_list_opt ()
-> $$ = nterm pointer ()
Stack now 0 29 23 38 54 125 56 34 49
Entering state 65
Reducing stack by rule 145 (line 299):
   $1 = token '*' ()
   $2 = nterm type_qualifier_list_opt ()
   $3 = nterm pointer ()
-> $$ = nterm pointer ()
Stack now 0 29 23 38 54 125 56
Entering state 40
Reducing stack by rule 142 (line 293):
   $1 = nterm pointer ()
-> $$ = nterm pointer_opt ()
Stack now 0 29 23 38 54 125 56
Entering state 39
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 59
Reducing stack by rule 133 (line 281):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 29 23 38 54 125 56 39
Entering state 61
Reading a token: Next token is token ';' ()
Reducing stack by rule 132 (line 276):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 29 23 38 54 125 56
Entering state 68
Next token is token ';' ()
Reducing stack by rule 96 (line 206):
   $1 = nterm declarator ()
-> $$ = nterm init_declarator ()
Stack now 0 29 23 38 54 125 56
Entering state 37
Reducing stack by rule 94 (line 201):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 29 23 38 54 125 56
Entering state 36
Next token is token ';' ()
Shifting token ';' ()
Entering state 52
Reducing stack by rule 84 (line 183):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 29 23 38 54 125
Entering state 121
Reducing stack by rule 186 (line 394):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 54 125
Entering state 212
Reducing stack by rule 185 (line 390):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 54
Entering state 125
Reading a token: Next token is token FOR ()
Shifting token FOR ()
Entering state 111
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 203
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 9
Reducing stack by rule 105 (line 221):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 29 23 38 54 125 111 203
Entering state 25
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 193):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29 23 38 54 125 111 203
Entering state 56
Next token is token IDENTIFIER ()
Reducing stack by rule 143 (line 294):
-> $$ = nterm pointer_opt ()
Stack now 0 29 23 38 54 125 111 203 56
Entering state 39
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 59
Reducing stack by rule 133 (line 281):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 29 23 38 54 125 111 203 56 39
Entering state 61
Reading a token: Next token is token ASSIGN ()
Reducing stack by rule 132 (line 276):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 29 23 38 54 125 111 203 56
Entering state 68
Next token is token ASSIGN ()
Shifting token ASSIGN ()
Entering state 53
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 72
Reducing stack by rule 5 (line 36):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 54 125 111 203 56 68 53
Entering state 87
Reducing stack by rule 2 (line 29):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 111 203 56 68 53
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 111 203 56 68 53
Entering state 88
Reading a token: Next token is token ';' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 111 203 56 68 53
Entering state 89
Next token is token ';' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 111 203 56 68 53
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 111 203 56 68 53
Entering state 92
Next token is token ';' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 111 203 56 68 53
Entering state 93
Next token is token ';' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 111 203 56 68 53
Entering state 94
Next token is token ';' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 111 203 56 68 53
Entering state 95
Next token is token ';' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 111 203 56 68 53
Entering state 96
Next token is token ';' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 111 203 56 68 53
Entering state 97
Next token is token ';' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 111 203 56 68 53
Entering state 98
Next token is token ';' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 111 203 56 68 53
Entering state 99
Next token is token ';' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 111 203 56 68 53
Entering state 100
Next token is token ';' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 111 203 56 68 53
Entering state 101
Next token is token ';' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 111 203 56 68 53
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 111 203 56 68 53
Entering state 103
Reducing stack by rule 161 (line 341):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 29 23 38 54 125 111 203 56 68 53
Entering state 104
Reducing stack by rule 97 (line 207):
   $1 = nterm declarator ()
   $2 = token ASSIGN ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 29 23 38 54 125 111 203 56
Entering state 37
Reducing stack by rule 94 (line 201):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 29 23 38 54 125 111 203 56
Entering state 36
Next token is token ';' ()
Shifting token ';' ()
Entering state 52
Reducing stack by rule 84 (line 183):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 29 23 38 54 125 111 203
Entering state 273
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 111 203 273
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 111 203 273
Entering state 88
Reading a token: Next token is token LT ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 111 203 273
Entering state 89
Next token is token LT ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 111 203 273
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 111 203 273
Entering state 92
Next token is token LT ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 111 203 273
Entering state 93
Next token is token LT ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 111 203 273
Entering state 94
Next token is token LT ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 111 203 273
Entering state 95
Next token is token LT ()
Shifting token LT ()
Entering state 186
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 72
Reducing stack by rule 5 (line 36):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 54 125 111 203 273 95 186
Entering state 87
Reducing stack by rule 2 (line 29):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 111 203 273 95 186
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 111 203 273 95 186
Entering state 88
Reading a token: Next token is token ';' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 111 203 273 95 186
Entering state 175
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 111 203 273 95 186
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 111 203 273 95 186
Entering state 92
Next token is token ';' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 111 203 273 95 186
Entering state 93
Next token is token ';' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 111 203 273 95 186
Entering state 258
Next token is token ';' ()
Reducing stack by rule 47 (line 106):
   $1 = nterm relational_expression ()
   $2 = token LT ()
   $3 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 111 203 273
Entering state 95
Next token is token ';' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 111 203 273
Entering state 96
Next token is token ';' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 111 203 273
Entering state 97
Next token is token ';' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 111 203 273
Entering state 98
Next token is token ';' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 111 203 273
Entering state 99
Next token is token ';' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 111 203 273
Entering state 100
Next token is token ';' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 111 203 273
Entering state 101
Next token is token ';' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 111 203 273
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 111 203 273
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 54 125 111 203 273
Entering state 120
Next token is token ';' ()
Reducing stack by rule 79 (line 169):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 54 125 111 203 273
Entering state 307
Next token is token ';' ()
Shifting token ';' ()
Entering state 324
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324
Entering state 88
Reading a token: Next token is token INCREMENT ()
Shifting token INCREMENT ()
Entering state 157
Reducing stack by rule 14 (line 47):
   $1 = nterm postfix_expression ()
   $2 = token INCREMENT ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324
Entering state 88
Reading a token: Next token is token ')' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324
Entering state 89
Next token is token ')' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324
Entering state 92
Next token is token ')' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324
Entering state 93
Next token is token ')' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324
Entering state 94
Next token is token ')' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324
Entering state 95
Next token is token ')' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324
Entering state 96
Next token is token ')' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324
Entering state 97
Next token is token ')' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324
Entering state 98
Next token is token ')' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324
Entering state 99
Next token is token ')' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324
Entering state 100
Next token is token ')' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324
Entering state 101
Next token is token ')' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324
Entering state 120
Next token is token ')' ()
Reducing stack by rule 79 (line 169):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 54 125 111 203 273 307 324
Entering state 333
Next token is token ')' ()
Shifting token ')' ()
Entering state 337
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 54
Reading a token: Next token is token SWITCH ()
Shifting token SWITCH ()
Entering state 114
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 206
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206
Entering state 88
Reading a token: Next token is token ')' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206
Entering state 89
Next token is token ')' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206
Entering state 92
Next token is token ')' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206
Entering state 93
Next token is token ')' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206
Entering state 94
Next token is token ')' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206
Entering state 95
Next token is token ')' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206
Entering state 96
Next token is token ')' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206
Entering state 97
Next token is token ')' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206
Entering state 98
Next token is token ')' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206
Entering state 99
Next token is token ')' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206
Entering state 100
Next token is token ')' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206
Entering state 101
Next token is token ')' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206
Entering state 276
Next token is token ')' ()
Shifting token ')' ()
Entering state 309
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 54
Reading a token: Next token is token CASE ()
Shifting token CASE ()
Entering state 106
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 79
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 72
Reducing stack by rule 5 (line 36):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 106 79
Entering state 87
Reducing stack by rule 2 (line 29):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 106 79
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 106 79
Entering state 88
Reading a token: Next token is token ')' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 106 79
Entering state 89
Next token is token ')' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 106 79
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 106 79
Entering state 92
Next token is token ')' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 106 79
Entering state 93
Next token is token ')' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 106 79
Entering state 94
Next token is token ')' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 106 79
Entering state 95
Next token is token ')' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 106 79
Entering state 96
Next token is token ')' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 106 79
Entering state 97
Next token is token ')' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 106 79
Entering state 98
Next token is token ')' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 106 79
Entering state 99
Next token is token ')' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 106 79
Entering state 100
Next token is token ')' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 106 79
Entering state 101
Next token is token ')' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 106 79
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 106 79
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 106 79
Entering state 145
Next token is token ')' ()
Shifting token ')' ()
Entering state 230
Reducing stack by rule 4 (line 31):
   $1 = token '(' ()
   $2 = nterm expression ()
   $3 = token ')' ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 106
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 106
Entering state 88
Reading a token: Next token is token ':' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 106
Entering state 175
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 106
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 106
Entering state 92
Next token is token ':' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 106
Entering state 93
Next token is token ':' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 106
Entering state 94
Next token is token ':' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 106
Entering state 95
Next token is token ':' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 106
Entering state 96
Next token is token ':' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 106
Entering state 97
Next token is token ':' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 106
Entering state 98
Next token is token ':' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 106
Entering state 99
Next token is token ':' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 106
Entering state 100
Next token is token ':' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 106
Entering state 101
Next token is token ':' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 106
Entering state 197
Reducing stack by rule 83 (line 179):
   $1 = nterm conditional_expression ()
-> $$ = nterm constant_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 106
Entering state 198
Next token is token ':' ()
Shifting token ':' ()
Entering state 268
Reading a token: Next token is token CONTINUE ()
Shifting token CONTINUE ()
Entering state 107
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 199
Reducing stack by rule 198 (line 421):
   $1 = token CONTINUE ()
   $2 = token ';' ()
-> $$ = nterm jump_statement ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 106 198 268
Entering state 131
Reducing stack by rule 178 (line 373):
   $1 = nterm jump_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 106 198 268
Entering state 303
Reducing stack by rule 180 (line 378):
   $1 = token CASE ()
   $2 = nterm constant_expression ()
   $3 = token ':' ()
   $4 = nterm statement ()
-> $$ = nterm labeled_statement ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54
Entering state 123
Reducing stack by rule 173 (line 368):
   $1 = nterm labeled_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54
Entering state 122
Reducing stack by rule 187 (line 395):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54
Entering state 126
Reducing stack by rule 184 (line 389):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54
Entering state 125
Reading a token: Next token is token CASE ()
Shifting token CASE ()
Entering state 106
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 79
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 72
Reducing stack by rule 5 (line 36):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 106 79
Entering state 87
Reducing stack by rule 2 (line 29):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 106 79
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 106 79
Entering state 88
Reading a token: Next token is token ')' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 106 79
Entering state 89
Next token is token ')' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 106 79
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 106 79
Entering state 92
Next token is token ')' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 106 79
Entering state 93
Next token is token ')' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 106 79
Entering state 94
Next token is token ')' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 106 79
Entering state 95
Next token is token ')' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 106 79
Entering state 96
Next token is token ')' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 106 79
Entering state 97
Next token is token ')' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 106 79
Entering state 98
Next token is token ')' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 106 79
Entering state 99
Next token is token ')' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 106 79
Entering state 100
Next token is token ')' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 106 79
Entering state 101
Next token is token ')' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 106 79
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 106 79
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 106 79
Entering state 145
Next token is token ')' ()
Shifting token ')' ()
Entering state 230
Reducing stack by rule 4 (line 31):
   $1 = token '(' ()
   $2 = nterm expression ()
   $3 = token ')' ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 106
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 106
Entering state 88
Reading a token: Next token is token ':' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 106
Entering state 175
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 106
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 106
Entering state 92
Next token is token ':' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 106
Entering state 93
Next token is token ':' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 106
Entering state 94
Next token is token ':' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 106
Entering state 95
Next token is token ':' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 106
Entering state 96
Next token is token ':' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 106
Entering state 97
Next token is token ':' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 106
Entering state 98
Next token is token ':' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 106
Entering state 99
Next token is token ':' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 106
Entering state 100
Next token is token ':' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 106
Entering state 101
Next token is token ':' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 106
Entering state 197
Reducing stack by rule 83 (line 179):
   $1 = nterm conditional_expression ()
-> $$ = nterm constant_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 106
Entering state 198
Next token is token ':' ()
Shifting token ':' ()
Entering state 268
Reading a token: Next token is token BREAK ()
Shifting token BREAK ()
Entering state 105
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 196
Reducing stack by rule 199 (line 422):
   $1 = token BREAK ()
   $2 = token ';' ()
-> $$ = nterm jump_statement ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 106 198 268
Entering state 131
Reducing stack by rule 178 (line 373):
   $1 = nterm jump_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 106 198 268
Entering state 303
Reducing stack by rule 180 (line 378):
   $1 = token CASE ()
   $2 = nterm constant_expression ()
   $3 = token ':' ()
   $4 = nterm statement ()
-> $$ = nterm labeled_statement ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125
Entering state 123
Reducing stack by rule 173 (line 368):
   $1 = nterm labeled_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125
Entering state 122
Reducing stack by rule 187 (line 395):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125
Entering state 212
Reducing stack by rule 185 (line 390):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54
Entering state 125
Reading a token: Next token is token DEFAULT ()
Shifting token DEFAULT ()
Entering state 108
Reading a token: Next token is token ':' ()
Shifting token ':' ()
Entering state 200
Reading a token: Next token is token RETURN ()
Shifting token RETURN ()
Entering state 115
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 72
Reducing stack by rule 5 (line 36):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 108 200 115
Entering state 87
Reducing stack by rule 2 (line 29):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 108 200 115
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 108 200 115
Entering state 88
Reading a token: Next token is token ';' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 108 200 115
Entering state 89
Next token is token ';' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 108 200 115
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 108 200 115
Entering state 92
Next token is token ';' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 108 200 115
Entering state 93
Next token is token ';' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 108 200 115
Entering state 94
Next token is token ';' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 108 200 115
Entering state 95
Next token is token ';' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 108 200 115
Entering state 96
Next token is token ';' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 108 200 115
Entering state 97
Next token is token ';' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 108 200 115
Entering state 98
Next token is token ';' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 108 200 115
Entering state 99
Next token is token ';' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 108 200 115
Entering state 100
Next token is token ';' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 108 200 115
Entering state 101
Next token is token ';' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 108 200 115
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 108 200 115
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 108 200 115
Entering state 120
Next token is token ';' ()
Reducing stack by rule 79 (line 169):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 108 200 115
Entering state 207
Next token is token ';' ()
Shifting token ';' ()
Entering state 277
Reducing stack by rule 200 (line 423):
   $1 = token RETURN ()
   $2 = nterm expression_opt ()
   $3 = token ';' ()
-> $$ = nterm jump_statement ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 108 200
Entering state 131
Reducing stack by rule 178 (line 373):
   $1 = nterm jump_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125 108 200
Entering state 269
Reducing stack by rule 181 (line 379):
   $1 = token DEFAULT ()
   $2 = token ':' ()
   $3 = nterm statement ()
-> $$ = nterm labeled_statement ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125
Entering state 123
Reducing stack by rule 173 (line 368):
   $1 = nterm labeled_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125
Entering state 122
Reducing stack by rule 187 (line 395):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54 125
Entering state 212
Reducing stack by rule 185 (line 390):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309 54
Entering state 125
Reading a token: Next token is token '}' ()
Shifting token '}' ()
Entering state 211
Reducing stack by rule 182 (line 383):
   $1 = token '{' ()
   $2 = nterm block_item_list ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309
Entering state 124
Reducing stack by rule 174 (line 369):
   $1 = nterm compound_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54 114 206 276 309
Entering state 326
Reducing stack by rule 192 (line 409):
   $1 = token SWITCH ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm statement ()
-> $$ = nterm selection_statement ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54
Entering state 129
Reducing stack by rule 176 (line 371):
   $1 = nterm selection_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54
Entering state 122
Reducing stack by rule 187 (line 395):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54
Entering state 126
Reducing stack by rule 184 (line 389):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337 54
Entering state 125
Reading a token: Next token is token '}' ()
Shifting token '}' ()
Entering state 211
Reducing stack by rule 182 (line 383):
   $1 = token '{' ()
   $2 = nterm block_item_list ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337
Entering state 124
Reducing stack by rule 174 (line 369):
   $1 = nterm compound_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 54 125 111 203 273 307 324 333 337
Entering state 339
Reducing stack by rule 196 (line 416):
   $1 = token FOR ()
   $2 = token '(' ()
   $3 = nterm declaration ()
   $4 = nterm expression_opt ()
   $5 = token ';' ()
   $6 = nterm expression_opt ()
   $7 = token ')' ()
   $8 = nterm statement ()
-> $$ = nterm iteration_statement ()
Stack now 0 29 23 38 54 125
Entering state 130
Reducing stack by rule 177 (line 372):
   $1 = nterm iteration_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 54 125
Entering state 122
Reducing stack by rule 187 (line 395):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 54 125
Entering state 212
Reducing stack by rule 185 (line 390):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 54
Entering state 125
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 9
Reducing stack by rule 105 (line 221):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 29 23 38 54 125
Entering state 25
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 193):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29 23 38 54 125
Entering state 56
Next token is token IDENTIFIER ()
Reducing stack by rule 143 (line 294):
-> $$ = nterm pointer_opt ()
Stack now 0 29 23 38 54 125 56
Entering state 39
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 59
Reducing stack by rule 133 (line 281):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 29 23 38 54 125 56 39
Entering state 61
Reading a token: Next token is token ASSIGN ()
Reducing stack by rule 132 (line 276):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 29 23 38 54 125 56
Entering state 68
Next token is token ASSIGN ()
Shifting token ASSIGN ()
Entering state 53
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 72
Reducing stack by rule 5 (line 36):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 87
Reducing stack by rule 2 (line 29):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 88
Reading a token: Next token is token ';' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 89
Next token is token ';' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 92
Next token is token ';' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 93
Next token is token ';' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 94
Next token is token ';' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 95
Next token is token ';' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 96
Next token is token ';' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 97
Next token is token ';' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 98
Next token is token ';' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 99
Next token is token ';' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 100
Next token is token ';' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 101
Next token is token ';' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 103
Reducing stack by rule 161 (line 341):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 29 23 38 54 125 56 68 53
Entering state 104
Reducing stack by rule 97 (line 207):
   $1 = nterm declarator ()
   $2 = token ASSIGN ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 29 23 38 54 125 56
Entering state 37
Reducing stack by rule 94 (line 201):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 29 23 38 54 125 56
Entering state 36
Next token is token ';' ()
Shifting token ';' ()
Entering state 52
Reducing stack by rule 84 (line 183):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 29 23 38 54 125
Entering state 121
Reducing stack by rule 186 (line 394):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 54 125
Entering state 212
Reducing stack by rule 185 (line 390):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 54
Entering state 125
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 116
Reading a token: Next token is token INCREMENT ()
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125
Entering state 88
Next token is token INCREMENT ()
Shifting token INCREMENT ()
Entering state 157
Reducing stack by rule 14 (line 47):
   $1 = nterm postfix_expression ()
   $2 = token INCREMENT ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125
Entering state 88
Reading a token: Next token is token ';' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125
Entering state 89
Next token is token ';' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125
Entering state 92
Next token is token ';' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125
Entering state 93
Next token is token ';' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125
Entering state 94
Next token is token ';' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125
Entering state 95
Next token is token ';' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125
Entering state 96
Next token is token ';' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125
Entering state 97
Next token is token ';' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125
Entering state 98
Next token is token ';' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125
Entering state 99
Next token is token ';' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125
Entering state 100
Next token is token ';' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125
Entering state 101
Next token is token ';' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 54 125
Entering state 120
Next token is token ';' ()
Reducing stack by rule 79 (line 169):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 54 125
Entering state 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 209
Reducing stack by rule 188 (line 399):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 29 23 38 54 125
Entering state 127
Reducing stack by rule 175 (line 370):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 54 125
Entering state 122
Reducing stack by rule 187 (line 395):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 54 125
Entering state 212
Reducing stack by rule 185 (line 390):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 54
Entering state 125
Reading a token: Next token is token DECREMENT ()
Shifting token DECREMENT ()
Entering state 77
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 77
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 77
Entering state 88
Reading a token: Next token is token ';' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 77
Entering state 144
Reducing stack by rule 24 (line 66):
   $1 = token DECREMENT ()
   $2 = nterm unary_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125
Entering state 89
Next token is token ';' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125
Entering state 92
Next token is token ';' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125
Entering state 93
Next token is token ';' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125
Entering state 94
Next token is token ';' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125
Entering state 95
Next token is token ';' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125
Entering state 96
Next token is token ';' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125
Entering state 97
Next token is token ';' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125
Entering state 98
Next token is token ';' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125
Entering state 99
Next token is token ';' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125
Entering state 100
Next token is token ';' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125
Entering state 101
Next token is token ';' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 54 125
Entering state 120
Next token is token ';' ()
Reducing stack by rule 79 (line 169):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 54 125
Entering state 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 209
Reducing stack by rule 188 (line 399):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 29 23 38 54 125
Entering state 127
Reducing stack by rule 175 (line 370):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 54 125
Entering state 122
Reducing stack by rule 187 (line 395):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 54 125
Entering state 212
Reducing stack by rule 185 (line 390):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 54
Entering state 125
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 116
Reading a token: Next token is token ASSIGN_MUL ()
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125
Entering state 88
Next token is token ASSIGN_MUL ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125
Entering state 89
Next token is token ASSIGN_MUL ()
Shifting token ASSIGN_MUL ()
Entering state 168
Reducing stack by rule 69 (line 156):
   $1 = token ASSIGN_MUL ()
-> $$ = nterm assignment_operator ()
Stack now 0 29 23 38 54 125 89
Entering state 174
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 88
Reading a token: Next token is token ';' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 89
Next token is token ';' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 92
Next token is token ';' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 93
Next token is token ';' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 94
Next token is token ';' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 95
Next token is token ';' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 96
Next token is token ';' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 97
Next token is token ';' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 98
Next token is token ';' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 99
Next token is token ';' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 100
Next token is token ';' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 101
Next token is token ';' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 248
Reducing stack by rule 67 (line 151):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 54 125
Entering state 120
Next token is token ';' ()
Reducing stack by rule 79 (line 169):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 54 125
Entering state 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 209
Reducing stack by rule 188 (line 399):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 29 23 38 54 125
Entering state 127
Reducing stack by rule 175 (line 370):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 54 125
Entering state 122
Reducing stack by rule 187 (line 395):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 54 125
Entering state 212
Reducing stack by rule 185 (line 390):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 54
Entering state 125
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 116
Reading a token: Next token is token ASSIGN ()
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125
Entering state 88
Next token is token ASSIGN ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125
Entering state 89
Next token is token ASSIGN ()
Shifting token ASSIGN ()
Entering state 163
Reducing stack by rule 68 (line 155):
   $1 = token ASSIGN ()
-> $$ = nterm assignment_operator ()
Stack now 0 29 23 38 54 125 89
Entering state 174
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 88
Reading a token: Next token is token '-' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 89
Next token is token '-' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 92
Next token is token '-' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 93
Next token is token '-' ()
Shifting token '-' ()
Entering state 181
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 72
Reducing stack by rule 5 (line 36):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 54 125 89 174 93 181
Entering state 87
Reducing stack by rule 2 (line 29):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 89 174 93 181
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 89 174 93 181
Entering state 88
Reading a token: Next token is token ';' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 89 174 93 181
Entering state 175
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 89 174 93 181
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 89 174 93 181
Entering state 253
Next token is token ';' ()
Reducing stack by rule 42 (line 95):
   $1 = nterm additive_expression ()
   $2 = token '-' ()
   $3 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 93
Next token is token ';' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 94
Next token is token ';' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 95
Next token is token ';' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 96
Next token is token ';' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 97
Next token is token ';' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 98
Next token is token ';' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 99
Next token is token ';' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 100
Next token is token ';' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 101
Next token is token ';' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 248
Reducing stack by rule 67 (line 151):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 54 125
Entering state 120
Next token is token ';' ()
Reducing stack by rule 79 (line 169):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 54 125
Entering state 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 209
Reducing stack by rule 188 (line 399):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 29 23 38 54 125
Entering state 127
Reducing stack by rule 175 (line 370):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 54 125
Entering state 122
Reducing stack by rule 187 (line 395):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 54 125
Entering state 212
Reducing stack by rule 185 (line 390):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 54
Entering state 125
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 116
Reading a token: Next token is token ASSIGN_BIT_OR ()
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125
Entering state 88
Next token is token ASSIGN_BIT_OR ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125
Entering state 89
Next token is token ASSIGN_BIT_OR ()
Shifting token ASSIGN_BIT_OR ()
Entering state 173
Reducing stack by rule 78 (line 165):
   $1 = token ASSIGN_BIT_OR ()
-> $$ = nterm assignment_operator ()
Stack now 0 29 23 38 54 125 89
Entering state 174
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 72
Reducing stack by rule 5 (line 36):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 54 125 89 174
Entering state 87
Reducing stack by rule 2 (line 29):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 88
Reading a token: Next token is token ';' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 89
Next token is token ';' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 92
Next token is token ';' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 93
Next token is token ';' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 94
Next token is token ';' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 95
Next token is token ';' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 96
Next token is token ';' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 97
Next token is token ';' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 98
Next token is token ';' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 99
Next token is token ';' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 100
Next token is token ';' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 101
Next token is token ';' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 248
Reducing stack by rule 67 (line 151):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 54 125
Entering state 120
Next token is token ';' ()
Reducing stack by rule 79 (line 169):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 54 125
Entering state 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 209
Reducing stack by rule 188 (line 399):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 29 23 38 54 125
Entering state 127
Reducing stack by rule 175 (line 370):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 54 125
Entering state 122
Reducing stack by rule 187 (line 395):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 54 125
Entering state 212
Reducing stack by rule 185 (line 390):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 54
Entering state 125
Reading a token: Next token is token IF ()
Shifting token IF ()
Entering state 110
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 202
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 110 202
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 110 202
Entering state 88
Reading a token: Next token is token OR ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 110 202
Entering state 89
Next token is token OR ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 110 202
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 110 202
Entering state 92
Next token is token OR ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 110 202
Entering state 93
Next token is token OR ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 110 202
Entering state 94
Next token is token OR ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 110 202
Entering state 95
Next token is token OR ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 110 202
Entering state 96
Next token is token OR ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 110 202
Entering state 97
Next token is token OR ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 110 202
Entering state 98
Next token is token OR ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 110 202
Entering state 99
Next token is token OR ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 110 202
Entering state 100
Next token is token OR ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 110 202
Entering state 101
Next token is token OR ()
Shifting token OR ()
Entering state 194
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 72
Reducing stack by rule 5 (line 36):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 54 125 110 202 101 194
Entering state 87
Reducing stack by rule 2 (line 29):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 110 202 101 194
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 110 202 101 194
Entering state 88
Reading a token: Next token is token AND ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 110 202 101 194
Entering state 175
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 110 202 101 194
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 110 202 101 194
Entering state 92
Next token is token AND ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 110 202 101 194
Entering state 93
Next token is token AND ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 110 202 101 194
Entering state 94
Next token is token AND ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 110 202 101 194
Entering state 95
Next token is token AND ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 110 202 101 194
Entering state 96
Next token is token AND ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 110 202 101 194
Entering state 97
Next token is token AND ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 110 202 101 194
Entering state 98
Next token is token AND ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 110 202 101 194
Entering state 99
Next token is token AND ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 110 202 101 194
Entering state 266
Next token is token AND ()
Shifting token AND ()
Entering state 193
Reading a token: Next token is token '!' ()
Shifting token '!' ()
Entering state 85
Reducing stack by rule 33 (line 78):
   $1 = token '!' ()
-> $$ = nterm unary_operator ()
Stack now 0 29 23 38 54 125 110 202 101 194 266 193
Entering state 90
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 110 202 101 194 266 193 90
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 110 202 101 194 266 193 90
Entering state 88
Reading a token: Next token is token ')' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 110 202 101 194 266 193 90
Entering state 175
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 110 202 101 194 266 193 90
Entering state 176
Reducing stack by rule 25 (line 67):
   $1 = nterm unary_operator ()
   $2 = nterm cast_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 110 202 101 194 266 193
Entering state 175
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 110 202 101 194 266 193
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 110 202 101 194 266 193
Entering state 92
Next token is token ')' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 110 202 101 194 266 193
Entering state 93
Next token is token ')' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 110 202 101 194 266 193
Entering state 94
Next token is token ')' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 110 202 101 194 266 193
Entering state 95
Next token is token ')' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 110 202 101 194 266 193
Entering state 96
Next token is token ')' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 110 202 101 194 266 193
Entering state 97
Next token is token ')' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 110 202 101 194 266 193
Entering state 98
Next token is token ')' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 110 202 101 194 266 193
Entering state 265
Next token is token ')' ()
Reducing stack by rule 61 (line 135):
   $1 = nterm logical_AND_expression ()
   $2 = token AND ()
   $3 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 110 202 101 194
Entering state 266
Next token is token ')' ()
Reducing stack by rule 63 (line 140):
   $1 = nterm logical_OR_expression ()
   $2 = token OR ()
   $3 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 110 202
Entering state 101
Next token is token ')' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 110 202
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 110 202
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 54 125 110 202
Entering state 271
Next token is token ')' ()
Shifting token ')' ()
Entering state 305
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 116
Reading a token: Next token is token ASSIGN ()
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305
Entering state 88
Next token is token ASSIGN ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305
Entering state 89
Next token is token ASSIGN ()
Shifting token ASSIGN ()
Entering state 163
Reducing stack by rule 68 (line 155):
   $1 = token ASSIGN ()
-> $$ = nterm assignment_operator ()
Stack now 0 29 23 38 54 125 110 202 271 305 89
Entering state 174
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 89 174
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 89 174
Entering state 88
Reading a token: Next token is token BIT_XOR ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 89 174
Entering state 89
Next token is token BIT_XOR ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 89 174
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 89 174
Entering state 92
Next token is token BIT_XOR ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 89 174
Entering state 93
Next token is token BIT_XOR ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 89 174
Entering state 94
Next token is token BIT_XOR ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 89 174
Entering state 95
Next token is token BIT_XOR ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 89 174
Entering state 96
Next token is token BIT_XOR ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 89 174
Entering state 97
Next token is token BIT_XOR ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 89 174
Entering state 98
Next token is token BIT_XOR ()
Shifting token BIT_XOR ()
Entering state 191
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 72
Reducing stack by rule 5 (line 36):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 54 125 110 202 271 305 89 174 98 191
Entering state 87
Reducing stack by rule 2 (line 29):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 89 174 98 191
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 89 174 98 191
Entering state 88
Reading a token: Next token is token ';' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 89 174 98 191
Entering state 175
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 89 174 98 191
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 89 174 98 191
Entering state 92
Next token is token ';' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 89 174 98 191
Entering state 93
Next token is token ';' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 89 174 98 191
Entering state 94
Next token is token ';' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 89 174 98 191
Entering state 95
Next token is token ';' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 89 174 98 191
Entering state 96
Next token is token ';' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 89 174 98 191
Entering state 263
Next token is token ';' ()
Reducing stack by rule 57 (line 125):
   $1 = nterm exclusive_OR_expression ()
   $2 = token BIT_XOR ()
   $3 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 89 174
Entering state 98
Next token is token ';' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 89 174
Entering state 99
Next token is token ';' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 89 174
Entering state 100
Next token is token ';' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 89 174
Entering state 101
Next token is token ';' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 89 174
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 89 174
Entering state 248
Reducing stack by rule 67 (line 151):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 54 125 110 202 271 305
Entering state 120
Next token is token ';' ()
Reducing stack by rule 79 (line 169):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 54 125 110 202 271 305
Entering state 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 209
Reducing stack by rule 188 (line 399):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 29 23 38 54 125 110 202 271 305
Entering state 127
Reducing stack by rule 175 (line 370):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 54 125 110 202 271 305
Entering state 322
Reducing stack by rule 189 (line 403):
   $1 = token IF ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm statement ()
-> $$ = nterm selection_statement_base ()
Stack now 0 29 23 38 54 125
Entering state 128
Reading a token: Next token is token IF ()
Reducing stack by rule 190 (line 407):
   $1 = nterm selection_statement_base ()
-> $$ = nterm selection_statement ()
Stack now 0 29 23 38 54 125
Entering state 129
Reducing stack by rule 176 (line 371):
   $1 = nterm selection_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 54 125
Entering state 122
Reducing stack by rule 187 (line 395):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 54 125
Entering state 212
Reducing stack by rule 185 (line 390):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 54
Entering state 125
Next token is token IF ()
Shifting token IF ()
Entering state 110
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 202
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 110 202
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 110 202
Entering state 88
Reading a token: Next token is token EQ ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 110 202
Entering state 89
Next token is token EQ ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 110 202
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 110 202
Entering state 92
Next token is token EQ ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 110 202
Entering state 93
Next token is token EQ ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 110 202
Entering state 94
Next token is token EQ ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 110 202
Entering state 95
Next token is token EQ ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 110 202
Entering state 96
Next token is token EQ ()
Shifting token EQ ()
Entering state 188
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 72
Reducing stack by rule 5 (line 36):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 54 125 110 202 96 188
Entering state 87
Reducing stack by rule 2 (line 29):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 110 202 96 188
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 110 202 96 188
Entering state 88
Reading a token: Next token is token ')' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 110 202 96 188
Entering state 175
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 110 202 96 188
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 110 202 96 188
Entering state 92
Next token is token ')' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 110 202 96 188
Entering state 93
Next token is token ')' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 110 202 96 188
Entering state 94
Next token is token ')' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 110 202 96 188
Entering state 260
Next token is token ')' ()
Reducing stack by rule 52 (line 114):
   $1 = nterm equality_expression ()
   $2 = token EQ ()
   $3 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 110 202
Entering state 96
Next token is token ')' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 110 202
Entering state 97
Next token is token ')' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 110 202
Entering state 98
Next token is token ')' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 110 202
Entering state 99
Next token is token ')' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 110 202
Entering state 100
Next token is token ')' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 110 202
Entering state 101
Next token is token ')' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 110 202
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 110 202
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 54 125 110 202
Entering state 271
Next token is token ')' ()
Shifting token ')' ()
Entering state 305
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 54
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 116
Reading a token: Next token is token ASSIGN_BIT_AND ()
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 54
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 54
Entering state 88
Next token is token ASSIGN_BIT_AND ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 54
Entering state 89
Next token is token ASSIGN_BIT_AND ()
Shifting token ASSIGN_BIT_AND ()
Entering state 171
Reducing stack by rule 76 (line 163):
   $1 = token ASSIGN_BIT_AND ()
-> $$ = nterm assignment_operator ()
Stack now 0 29 23 38 54 125 110 202 271 305 54 89
Entering state 174
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 54 89 174
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 54 89 174
Entering state 88
Reading a token: Next token is token ';' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 54 89 174
Entering state 89
Next token is token ';' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 54 89 174
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 54 89 174
Entering state 92
Next token is token ';' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 54 89 174
Entering state 93
Next token is token ';' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 54 89 174
Entering state 94
Next token is token ';' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 54 89 174
Entering state 95
Next token is token ';' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 54 89 174
Entering state 96
Next token is token ';' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 54 89 174
Entering state 97
Next token is token ';' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 54 89 174
Entering state 98
Next token is token ';' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 54 89 174
Entering state 99
Next token is token ';' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 54 89 174
Entering state 100
Next token is token ';' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 54 89 174
Entering state 101
Next token is token ';' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 54 89 174
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 54 89 174
Entering state 248
Reducing stack by rule 67 (line 151):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 54
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 54
Entering state 120
Next token is token ';' ()
Reducing stack by rule 79 (line 169):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 54 125 110 202 271 305 54
Entering state 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 209
Reducing stack by rule 188 (line 399):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 29 23 38 54 125 110 202 271 305 54
Entering state 127
Reducing stack by rule 175 (line 370):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 54 125 110 202 271 305 54
Entering state 122
Reducing stack by rule 187 (line 395):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 54 125 110 202 271 305 54
Entering state 126
Reducing stack by rule 184 (line 389):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 54 125 110 202 271 305 54
Entering state 125
Reading a token: Next token is token '}' ()
Shifting token '}' ()
Entering state 211
Reducing stack by rule 182 (line 383):
   $1 = token '{' ()
   $2 = nterm block_item_list ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 29 23 38 54 125 110 202 271 305
Entering state 124
Reducing stack by rule 174 (line 369):
   $1 = nterm compound_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 54 125 110 202 271 305
Entering state 322
Reducing stack by rule 189 (line 403):
   $1 = token IF ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm statement ()
-> $$ = nterm selection_statement_base ()
Stack now 0 29 23 38 54 125
Entering state 128
Reading a token: Next token is token IF ()
Reducing stack by rule 190 (line 407):
   $1 = nterm selection_statement_base ()
-> $$ = nterm selection_statement ()
Stack now 0 29 23 38 54 125
Entering state 129
Reducing stack by rule 176 (line 371):
   $1 = nterm selection_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 54 125
Entering state 122
Reducing stack by rule 187 (line 395):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 54 125
Entering state 212
Reducing stack by rule 185 (line 390):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 54
Entering state 125
Next token is token IF ()
Shifting token IF ()
Entering state 110
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 202
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 110 202
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 110 202
Entering state 88
Reading a token: Next token is token GT ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 110 202
Entering state 89
Next token is token GT ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 110 202
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 110 202
Entering state 92
Next token is token GT ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 110 202
Entering state 93
Next token is token GT ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 110 202
Entering state 94
Next token is token GT ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 110 202
Entering state 95
Next token is token GT ()
Shifting token GT ()
Entering state 187
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 72
Reducing stack by rule 5 (line 36):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 54 125 110 202 95 187
Entering state 87
Reducing stack by rule 2 (line 29):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 110 202 95 187
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 110 202 95 187
Entering state 88
Reading a token: Next token is token ')' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 110 202 95 187
Entering state 175
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 110 202 95 187
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 110 202 95 187
Entering state 92
Next token is token ')' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 110 202 95 187
Entering state 93
Next token is token ')' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 110 202 95 187
Entering state 259
Next token is token ')' ()
Reducing stack by rule 48 (line 107):
   $1 = nterm relational_expression ()
   $2 = token GT ()
   $3 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 110 202
Entering state 95
Next token is token ')' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 110 202
Entering state 96
Next token is token ')' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 110 202
Entering state 97
Next token is token ')' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 110 202
Entering state 98
Next token is token ')' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 110 202
Entering state 99
Next token is token ')' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 110 202
Entering state 100
Next token is token ')' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 110 202
Entering state 101
Next token is token ')' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 110 202
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 110 202
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 54 125 110 202
Entering state 271
Next token is token ')' ()
Shifting token ')' ()
Entering state 305
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 54
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 116
Reading a token: Next token is token ASSIGN_MODULO ()
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 54
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 54
Entering state 88
Next token is token ASSIGN_MODULO ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 54
Entering state 89
Next token is token ASSIGN_MODULO ()
Shifting token ASSIGN_MODULO ()
Entering state 170
Reducing stack by rule 71 (line 158):
   $1 = token ASSIGN_MODULO ()
-> $$ = nterm assignment_operator ()
Stack now 0 29 23 38 54 125 110 202 271 305 54 89
Entering state 174
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 72
Reducing stack by rule 5 (line 36):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 54 125 110 202 271 305 54 89 174
Entering state 87
Reducing stack by rule 2 (line 29):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 54 89 174
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 54 89 174
Entering state 88
Reading a token: Next token is token ';' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 54 89 174
Entering state 89
Next token is token ';' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 54 89 174
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 54 89 174
Entering state 92
Next token is token ';' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 54 89 174
Entering state 93
Next token is token ';' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 54 89 174
Entering state 94
Next token is token ';' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 54 89 174
Entering state 95
Next token is token ';' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 54 89 174
Entering state 96
Next token is token ';' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 54 89 174
Entering state 97
Next token is token ';' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 54 89 174
Entering state 98
Next token is token ';' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 54 89 174
Entering state 99
Next token is token ';' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 54 89 174
Entering state 100
Next token is token ';' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 54 89 174
Entering state 101
Next token is token ';' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 54 89 174
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 54 89 174
Entering state 248
Reducing stack by rule 67 (line 151):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 54
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 54 125 110 202 271 305 54
Entering state 120
Next token is token ';' ()
Reducing stack by rule 79 (line 169):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 54 125 110 202 271 305 54
Entering state 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 209
Reducing stack by rule 188 (line 399):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 29 23 38 54 125 110 202 271 305 54
Entering state 127
Reducing stack by rule 175 (line 370):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 54 125 110 202 271 305 54
Entering state 122
Reducing stack by rule 187 (line 395):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 54 125 110 202 271 305 54
Entering state 126
Reducing stack by rule 184 (line 389):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 54 125 110 202 271 305 54
Entering state 125
Reading a token: Next token is token '}' ()
Shifting token '}' ()
Entering state 211
Reducing stack by rule 182 (line 383):
   $1 = token '{' ()
   $2 = nterm block_item_list ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 29 23 38 54 125 110 202 271 305
Entering state 124
Reducing stack by rule 174 (line 369):
   $1 = nterm compound_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 54 125 110 202 271 305
Entering state 322
Reducing stack by rule 189 (line 403):
   $1 = token IF ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm statement ()
-> $$ = nterm selection_statement_base ()
Stack now 0 29 23 38 54 125
Entering state 128
Reading a token: Next token is token ELSE ()
Shifting token ELSE ()
Entering state 213
Reading a token: Next token is token IF ()
Shifting token IF ()
Entering state 110
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 202
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 128 213 110 202
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 128 213 110 202
Entering state 88
Reading a token: Next token is token LT ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 128 213 110 202
Entering state 89
Next token is token LT ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 128 213 110 202
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 128 213 110 202
Entering state 92
Next token is token LT ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 128 213 110 202
Entering state 93
Next token is token LT ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 128 213 110 202
Entering state 94
Next token is token LT ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 128 213 110 202
Entering state 95
Next token is token LT ()
Shifting token LT ()
Entering state 186
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 72
Reducing stack by rule 5 (line 36):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 54 125 128 213 110 202 95 186
Entering state 87
Reducing stack by rule 2 (line 29):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 128 213 110 202 95 186
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 128 213 110 202 95 186
Entering state 88
Reading a token: Next token is token ')' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 128 213 110 202 95 186
Entering state 175
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 128 213 110 202 95 186
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 128 213 110 202 95 186
Entering state 92
Next token is token ')' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 128 213 110 202 95 186
Entering state 93
Next token is token ')' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 128 213 110 202 95 186
Entering state 258
Next token is token ')' ()
Reducing stack by rule 47 (line 106):
   $1 = nterm relational_expression ()
   $2 = token LT ()
   $3 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 128 213 110 202
Entering state 95
Next token is token ')' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 128 213 110 202
Entering state 96
Next token is token ')' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 128 213 110 202
Entering state 97
Next token is token ')' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 128 213 110 202
Entering state 98
Next token is token ')' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 128 213 110 202
Entering state 99
Next token is token ')' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 128 213 110 202
Entering state 100
Next token is token ')' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 128 213 110 202
Entering state 101
Next token is token ')' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 128 213 110 202
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 128 213 110 202
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 54 125 128 213 110 202
Entering state 271
Next token is token ')' ()
Shifting token ')' ()
Entering state 305
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 116
Reading a token: Next token is token ASSIGN_ADD ()
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 128 213 110 202 271 305
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 128 213 110 202 271 305
Entering state 88
Next token is token ASSIGN_ADD ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 128 213 110 202 271 305
Entering state 89
Next token is token ASSIGN_ADD ()
Shifting token ASSIGN_ADD ()
Entering state 166
Reducing stack by rule 72 (line 159):
   $1 = token ASSIGN_ADD ()
-> $$ = nterm assignment_operator ()
Stack now 0 29 23 38 54 125 128 213 110 202 271 305 89
Entering state 174
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 72
Reducing stack by rule 5 (line 36):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 54 125 128 213 110 202 271 305 89 174
Entering state 87
Reducing stack by rule 2 (line 29):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 128 213 110 202 271 305 89 174
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 128 213 110 202 271 305 89 174
Entering state 88
Reading a token: Next token is token ';' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 128 213 110 202 271 305 89 174
Entering state 89
Next token is token ';' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 128 213 110 202 271 305 89 174
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 128 213 110 202 271 305 89 174
Entering state 92
Next token is token ';' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 128 213 110 202 271 305 89 174
Entering state 93
Next token is token ';' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 128 213 110 202 271 305 89 174
Entering state 94
Next token is token ';' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 128 213 110 202 271 305 89 174
Entering state 95
Next token is token ';' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 128 213 110 202 271 305 89 174
Entering state 96
Next token is token ';' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 128 213 110 202 271 305 89 174
Entering state 97
Next token is token ';' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 128 213 110 202 271 305 89 174
Entering state 98
Next token is token ';' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 128 213 110 202 271 305 89 174
Entering state 99
Next token is token ';' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 128 213 110 202 271 305 89 174
Entering state 100
Next token is token ';' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 128 213 110 202 271 305 89 174
Entering state 101
Next token is token ';' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 128 213 110 202 271 305 89 174
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 128 213 110 202 271 305 89 174
Entering state 248
Reducing stack by rule 67 (line 151):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 128 213 110 202 271 305
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 54 125 128 213 110 202 271 305
Entering state 120
Next token is token ';' ()
Reducing stack by rule 79 (line 169):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 54 125 128 213 110 202 271 305
Entering state 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 209
Reducing stack by rule 188 (line 399):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 29 23 38 54 125 128 213 110 202 271 305
Entering state 127
Reducing stack by rule 175 (line 370):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 54 125 128 213 110 202 271 305
Entering state 322
Reducing stack by rule 189 (line 403):
   $1 = token IF ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm statement ()
-> $$ = nterm selection_statement_base ()
Stack now 0 29 23 38 54 125 128 213
Entering state 128
Reading a token: Next token is token ELSE ()
Shifting token ELSE ()
Entering state 213
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 116
Reading a token: Next token is token ASSIGN_SUB ()
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 128 213 128 213
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 128 213 128 213
Entering state 88
Next token is token ASSIGN_SUB ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 128 213 128 213
Entering state 89
Next token is token ASSIGN_SUB ()
Shifting token ASSIGN_SUB ()
Entering state 167
Reducing stack by rule 73 (line 160):
   $1 = token ASSIGN_SUB ()
-> $$ = nterm assignment_operator ()
Stack now 0 29 23 38 54 125 128 213 128 213 89
Entering state 174
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 72
Reducing stack by rule 5 (line 36):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 54 125 128 213 128 213 89 174
Entering state 87
Reducing stack by rule 2 (line 29):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 128 213 128 213 89 174
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 128 213 128 213 89 174
Entering state 88
Reading a token: Next token is token ';' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 128 213 128 213 89 174
Entering state 89
Next token is token ';' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 128 213 128 213 89 174
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 128 213 128 213 89 174
Entering state 92
Next token is token ';' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 128 213 128 213 89 174
Entering state 93
Next token is token ';' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 128 213 128 213 89 174
Entering state 94
Next token is token ';' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 128 213 128 213 89 174
Entering state 95
Next token is token ';' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 128 213 128 213 89 174
Entering state 96
Next token is token ';' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 128 213 128 213 89 174
Entering state 97
Next token is token ';' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 128 213 128 213 89 174
Entering state 98
Next token is token ';' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 128 213 128 213 89 174
Entering state 99
Next token is token ';' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 128 213 128 213 89 174
Entering state 100
Next token is token ';' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 128 213 128 213 89 174
Entering state 101
Next token is token ';' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 128 213 128 213 89 174
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 128 213 128 213 89 174
Entering state 248
Reducing stack by rule 67 (line 151):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 128 213 128 213
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 54 125 128 213 128 213
Entering state 120
Next token is token ';' ()
Reducing stack by rule 79 (line 169):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 54 125 128 213 128 213
Entering state 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 209
Reducing stack by rule 188 (line 399):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 29 23 38 54 125 128 213 128 213
Entering state 127
Reducing stack by rule 175 (line 370):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 54 125 128 213 128 213
Entering state 280
Reducing stack by rule 191 (line 408):
   $1 = nterm selection_statement_base ()
   $2 = token ELSE ()
   $3 = nterm statement ()
-> $$ = nterm selection_statement ()
Stack now 0 29 23 38 54 125 128 213
Entering state 129
Reducing stack by rule 176 (line 371):
   $1 = nterm selection_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 54 125 128 213
Entering state 280
Reducing stack by rule 191 (line 408):
   $1 = nterm selection_statement_base ()
   $2 = token ELSE ()
   $3 = nterm statement ()
-> $$ = nterm selection_statement ()
Stack now 0 29 23 38 54 125
Entering state 129
Reducing stack by rule 176 (line 371):
   $1 = nterm selection_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 54 125
Entering state 122
Reducing stack by rule 187 (line 395):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 54 125
Entering state 212
Reducing stack by rule 185 (line 390):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 54
Entering state 125
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 116
Reading a token: Next token is token ASSIGN ()
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125
Entering state 88
Next token is token ASSIGN ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125
Entering state 89
Next token is token ASSIGN ()
Shifting token ASSIGN ()
Entering state 163
Reducing stack by rule 68 (line 155):
   $1 = token ASSIGN ()
-> $$ = nterm assignment_operator ()
Stack now 0 29 23 38 54 125 89
Entering state 174
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 88
Reading a token: Next token is token '%' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 89
Next token is token '%' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 92
Next token is token '%' ()
Shifting token '%' ()
Entering state 179
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 72
Reducing stack by rule 5 (line 36):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 54 125 89 174 92 179
Entering state 87
Reducing stack by rule 2 (line 29):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 89 174 92 179
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 89 174 92 179
Entering state 88
Reading a token: Next token is token ';' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 89 174 92 179
Entering state 175
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 89 174 92 179
Entering state 251
Reducing stack by rule 39 (line 90):
   $1 = nterm multiplicative_expression ()
   $2 = token '%' ()
   $3 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 92
Next token is token ';' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 93
Next token is token ';' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 94
Next token is token ';' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 95
Next token is token ';' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 96
Next token is token ';' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 97
Next token is token ';' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 98
Next token is token ';' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 99
Next token is token ';' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 100
Next token is token ';' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 101
Next token is token ';' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 248
Reducing stack by rule 67 (line 151):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 54 125
Entering state 120
Next token is token ';' ()
Reducing stack by rule 79 (line 169):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 54 125
Entering state 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 209
Reducing stack by rule 188 (line 399):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 29 23 38 54 125
Entering state 127
Reducing stack by rule 175 (line 370):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 54 125
Entering state 122
Reducing stack by rule 187 (line 395):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 54 125
Entering state 212
Reducing stack by rule 185 (line 390):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 54
Entering state 125
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 116
Reading a token: Next token is token ASSIGN ()
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125
Entering state 88
Next token is token ASSIGN ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125
Entering state 89
Next token is token ASSIGN ()
Shifting token ASSIGN ()
Entering state 163
Reducing stack by rule 68 (line 155):
   $1 = token ASSIGN ()
-> $$ = nterm assignment_operator ()
Stack now 0 29 23 38 54 125 89
Entering state 174
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 72
Reducing stack by rule 5 (line 36):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 54 125 89 174
Entering state 87
Reducing stack by rule 2 (line 29):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 88
Reading a token: Next token is token OR ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 89
Next token is token OR ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 92
Next token is token OR ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 93
Next token is token OR ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 94
Next token is token OR ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 95
Next token is token OR ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 96
Next token is token OR ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 97
Next token is token OR ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 98
Next token is token OR ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 99
Next token is token OR ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 100
Next token is token OR ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 101
Next token is token OR ()
Shifting token OR ()
Entering state 194
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 79
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 72
Reducing stack by rule 5 (line 36):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 54 125 89 174 101 194 79
Entering state 87
Reducing stack by rule 2 (line 29):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 89 174 101 194 79
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 89 174 101 194 79
Entering state 88
Reading a token: Next token is token BIT_XOR ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 89 174 101 194 79
Entering state 89
Next token is token BIT_XOR ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 89 174 101 194 79
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 89 174 101 194 79
Entering state 92
Next token is token BIT_XOR ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 89 174 101 194 79
Entering state 93
Next token is token BIT_XOR ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 89 174 101 194 79
Entering state 94
Next token is token BIT_XOR ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 89 174 101 194 79
Entering state 95
Next token is token BIT_XOR ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 89 174 101 194 79
Entering state 96
Next token is token BIT_XOR ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 89 174 101 194 79
Entering state 97
Next token is token BIT_XOR ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 89 174 101 194 79
Entering state 98
Next token is token BIT_XOR ()
Shifting token BIT_XOR ()
Entering state 191
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 72
Reducing stack by rule 5 (line 36):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 54 125 89 174 101 194 79 98 191
Entering state 87
Reducing stack by rule 2 (line 29):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 89 174 101 194 79 98 191
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 89 174 101 194 79 98 191
Entering state 88
Reading a token: Next token is token ')' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 89 174 101 194 79 98 191
Entering state 175
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 89 174 101 194 79 98 191
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 89 174 101 194 79 98 191
Entering state 92
Next token is token ')' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 89 174 101 194 79 98 191
Entering state 93
Next token is token ')' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 89 174 101 194 79 98 191
Entering state 94
Next token is token ')' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 89 174 101 194 79 98 191
Entering state 95
Next token is token ')' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 89 174 101 194 79 98 191
Entering state 96
Next token is token ')' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 89 174 101 194 79 98 191
Entering state 263
Next token is token ')' ()
Reducing stack by rule 57 (line 125):
   $1 = nterm exclusive_OR_expression ()
   $2 = token BIT_XOR ()
   $3 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 89 174 101 194 79
Entering state 98
Next token is token ')' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 89 174 101 194 79
Entering state 99
Next token is token ')' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 89 174 101 194 79
Entering state 100
Next token is token ')' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 89 174 101 194 79
Entering state 101
Next token is token ')' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 89 174 101 194 79
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 89 174 101 194 79
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 54 125 89 174 101 194 79
Entering state 145
Next token is token ')' ()
Shifting token ')' ()
Entering state 230
Reducing stack by rule 4 (line 31):
   $1 = token '(' ()
   $2 = nterm expression ()
   $3 = token ')' ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 89 174 101 194
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 89 174 101 194
Entering state 88
Reading a token: Next token is token ';' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 89 174 101 194
Entering state 175
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 89 174 101 194
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 89 174 101 194
Entering state 92
Next token is token ';' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 89 174 101 194
Entering state 93
Next token is token ';' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 89 174 101 194
Entering state 94
Next token is token ';' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 89 174 101 194
Entering state 95
Next token is token ';' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 89 174 101 194
Entering state 96
Next token is token ';' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 89 174 101 194
Entering state 97
Next token is token ';' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 89 174 101 194
Entering state 98
Next token is token ';' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 89 174 101 194
Entering state 99
Next token is token ';' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 89 174 101 194
Entering state 266
Next token is token ';' ()
Reducing stack by rule 63 (line 140):
   $1 = nterm logical_OR_expression ()
   $2 = token OR ()
   $3 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 101
Next token is token ';' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 248
Reducing stack by rule 67 (line 151):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 54 125
Entering state 120
Next token is token ';' ()
Reducing stack by rule 79 (line 169):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 54 125
Entering state 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 209
Reducing stack by rule 188 (line 399):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 29 23 38 54 125
Entering state 127
Reducing stack by rule 175 (line 370):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 54 125
Entering state 122
Reducing stack by rule 187 (line 395):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 54 125
Entering state 212
Reducing stack by rule 185 (line 390):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 54
Entering state 125
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 116
Reading a token: Next token is token ASSIGN ()
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125
Entering state 88
Next token is token ASSIGN ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125
Entering state 89
Next token is token ASSIGN ()
Shifting token ASSIGN ()
Entering state 163
Reducing stack by rule 68 (line 155):
   $1 = token ASSIGN ()
-> $$ = nterm assignment_operator ()
Stack now 0 29 23 38 54 125 89
Entering state 174
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 79
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 79
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 79
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 89 174 79 79 79
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 89 174 79 79 79
Entering state 88
Reading a token: Next token is token RS ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 89 174 79 79 79
Entering state 89
Next token is token RS ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 89 174 79 79 79
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 89 174 79 79 79
Entering state 92
Next token is token RS ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 89 174 79 79 79
Entering state 93
Next token is token RS ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 89 174 79 79 79
Entering state 94
Next token is token RS ()
Shifting token RS ()
Entering state 182
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 72
Reducing stack by rule 5 (line 36):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 54 125 89 174 79 79 79 94 182
Entering state 87
Reducing stack by rule 2 (line 29):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 89 174 79 79 79 94 182
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 89 174 79 79 79 94 182
Entering state 88
Reading a token: Next token is token ')' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 89 174 79 79 79 94 182
Entering state 175
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 89 174 79 79 79 94 182
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 89 174 79 79 79 94 182
Entering state 92
Next token is token ')' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 89 174 79 79 79 94 182
Entering state 254
Next token is token ')' ()
Reducing stack by rule 45 (line 101):
   $1 = nterm shift_expression ()
   $2 = token RS ()
   $3 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 89 174 79 79 79
Entering state 94
Next token is token ')' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 89 174 79 79 79
Entering state 95
Next token is token ')' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 89 174 79 79 79
Entering state 96
Next token is token ')' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 89 174 79 79 79
Entering state 97
Next token is token ')' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 89 174 79 79 79
Entering state 98
Next token is token ')' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 89 174 79 79 79
Entering state 99
Next token is token ')' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 89 174 79 79 79
Entering state 100
Next token is token ')' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 89 174 79 79 79
Entering state 101
Next token is token ')' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 89 174 79 79 79
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 89 174 79 79 79
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 54 125 89 174 79 79 79
Entering state 145
Next token is token ')' ()
Shifting token ')' ()
Entering state 230
Reducing stack by rule 4 (line 31):
   $1 = token '(' ()
   $2 = nterm expression ()
   $3 = token ')' ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 89 174 79 79
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 89 174 79 79
Entering state 88
Reading a token: Next token is token LS ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 89 174 79 79
Entering state 89
Next token is token LS ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 89 174 79 79
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 89 174 79 79
Entering state 92
Next token is token LS ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 89 174 79 79
Entering state 93
Next token is token LS ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 89 174 79 79
Entering state 94
Next token is token LS ()
Shifting token LS ()
Entering state 183
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 72
Reducing stack by rule 5 (line 36):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 54 125 89 174 79 79 94 183
Entering state 87
Reducing stack by rule 2 (line 29):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 89 174 79 79 94 183
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 89 174 79 79 94 183
Entering state 88
Reading a token: Next token is token ')' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 89 174 79 79 94 183
Entering state 175
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 89 174 79 79 94 183
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 89 174 79 79 94 183
Entering state 92
Next token is token ')' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 89 174 79 79 94 183
Entering state 255
Next token is token ')' ()
Reducing stack by rule 44 (line 100):
   $1 = nterm shift_expression ()
   $2 = token LS ()
   $3 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 89 174 79 79
Entering state 94
Next token is token ')' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 89 174 79 79
Entering state 95
Next token is token ')' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 89 174 79 79
Entering state 96
Next token is token ')' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 89 174 79 79
Entering state 97
Next token is token ')' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 89 174 79 79
Entering state 98
Next token is token ')' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 89 174 79 79
Entering state 99
Next token is token ')' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 89 174 79 79
Entering state 100
Next token is token ')' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 89 174 79 79
Entering state 101
Next token is token ')' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 89 174 79 79
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 89 174 79 79
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 54 125 89 174 79 79
Entering state 145
Next token is token ')' ()
Shifting token ')' ()
Entering state 230
Reducing stack by rule 4 (line 31):
   $1 = token '(' ()
   $2 = nterm expression ()
   $3 = token ')' ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 89 174 79
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 89 174 79
Entering state 88
Reading a token: Next token is token '+' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 89 174 79
Entering state 89
Next token is token '+' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 89 174 79
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 89 174 79
Entering state 92
Next token is token '+' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 89 174 79
Entering state 93
Next token is token '+' ()
Shifting token '+' ()
Entering state 180
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 72
Reducing stack by rule 5 (line 36):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 54 125 89 174 79 93 180
Entering state 87
Reducing stack by rule 2 (line 29):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 89 174 79 93 180
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 89 174 79 93 180
Entering state 88
Reading a token: Next token is token ')' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 89 174 79 93 180
Entering state 175
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 89 174 79 93 180
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 89 174 79 93 180
Entering state 252
Next token is token ')' ()
Reducing stack by rule 41 (line 94):
   $1 = nterm additive_expression ()
   $2 = token '+' ()
   $3 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 89 174 79
Entering state 93
Next token is token ')' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 89 174 79
Entering state 94
Next token is token ')' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 89 174 79
Entering state 95
Next token is token ')' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 89 174 79
Entering state 96
Next token is token ')' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 89 174 79
Entering state 97
Next token is token ')' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 89 174 79
Entering state 98
Next token is token ')' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 89 174 79
Entering state 99
Next token is token ')' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 89 174 79
Entering state 100
Next token is token ')' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 89 174 79
Entering state 101
Next token is token ')' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 89 174 79
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 89 174 79
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 54 125 89 174 79
Entering state 145
Next token is token ')' ()
Shifting token ')' ()
Entering state 230
Reducing stack by rule 4 (line 31):
   $1 = token '(' ()
   $2 = nterm expression ()
   $3 = token ')' ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 88
Reading a token: Next token is token '-' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 89
Next token is token '-' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 92
Next token is token '-' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 93
Next token is token '-' ()
Shifting token '-' ()
Entering state 181
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 72
Reducing stack by rule 5 (line 36):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 54 125 89 174 93 181
Entering state 87
Reducing stack by rule 2 (line 29):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 89 174 93 181
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 89 174 93 181
Entering state 88
Reading a token: Next token is token ';' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 89 174 93 181
Entering state 175
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 89 174 93 181
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 89 174 93 181
Entering state 253
Next token is token ';' ()
Reducing stack by rule 42 (line 95):
   $1 = nterm additive_expression ()
   $2 = token '-' ()
   $3 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 93
Next token is token ';' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 94
Next token is token ';' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 95
Next token is token ';' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 96
Next token is token ';' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 97
Next token is token ';' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 98
Next token is token ';' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 99
Next token is token ';' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 100
Next token is token ';' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 101
Next token is token ';' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 248
Reducing stack by rule 67 (line 151):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 54 125
Entering state 120
Next token is token ';' ()
Reducing stack by rule 79 (line 169):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 54 125
Entering state 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 209
Reducing stack by rule 188 (line 399):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 29 23 38 54 125
Entering state 127
Reducing stack by rule 175 (line 370):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 54 125
Entering state 122
Reducing stack by rule 187 (line 395):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 54 125
Entering state 212
Reducing stack by rule 185 (line 390):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 54
Entering state 125
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 116
Reading a token: Next token is token ASSIGN_MUL ()
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125
Entering state 88
Next token is token ASSIGN_MUL ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125
Entering state 89
Next token is token ASSIGN_MUL ()
Shifting token ASSIGN_MUL ()
Entering state 168
Reducing stack by rule 69 (line 156):
   $1 = token ASSIGN_MUL ()
-> $$ = nterm assignment_operator ()
Stack now 0 29 23 38 54 125 89
Entering state 174
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 72
Reducing stack by rule 5 (line 36):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 54 125 89 174
Entering state 87
Reducing stack by rule 2 (line 29):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 88
Reading a token: Next token is token ';' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 89
Next token is token ';' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 92
Next token is token ';' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 93
Next token is token ';' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 94
Next token is token ';' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 95
Next token is token ';' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 96
Next token is token ';' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 97
Next token is token ';' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 98
Next token is token ';' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 99
Next token is token ';' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 100
Next token is token ';' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 101
Next token is token ';' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 248
Reducing stack by rule 67 (line 151):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 54 125
Entering state 120
Next token is token ';' ()
Reducing stack by rule 79 (line 169):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 54 125
Entering state 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 209
Reducing stack by rule 188 (line 399):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 29 23 38 54 125
Entering state 127
Reducing stack by rule 175 (line 370):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 54 125
Entering state 122
Reducing stack by rule 187 (line 395):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 54 125
Entering state 212
Reducing stack by rule 185 (line 390):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 54
Entering state 125
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 116
Reading a token: Next token is token ASSIGN ()
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125
Entering state 88
Next token is token ASSIGN ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125
Entering state 89
Next token is token ASSIGN ()
Shifting token ASSIGN ()
Entering state 163
Reducing stack by rule 68 (line 155):
   $1 = token ASSIGN ()
-> $$ = nterm assignment_operator ()
Stack now 0 29 23 38 54 125 89
Entering state 174
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 88
Reading a token: Next token is token '%' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 89
Next token is token '%' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 92
Next token is token '%' ()
Shifting token '%' ()
Entering state 179
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 72
Reducing stack by rule 5 (line 36):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 54 125 89 174 92 179
Entering state 87
Reducing stack by rule 2 (line 29):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 89 174 92 179
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 89 174 92 179
Entering state 88
Reading a token: Next token is token ';' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 89 174 92 179
Entering state 175
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 89 174 92 179
Entering state 251
Reducing stack by rule 39 (line 90):
   $1 = nterm multiplicative_expression ()
   $2 = token '%' ()
   $3 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 92
Next token is token ';' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 93
Next token is token ';' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 94
Next token is token ';' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 95
Next token is token ';' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 96
Next token is token ';' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 97
Next token is token ';' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 98
Next token is token ';' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 99
Next token is token ';' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 100
Next token is token ';' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 101
Next token is token ';' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 248
Reducing stack by rule 67 (line 151):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 54 125
Entering state 120
Next token is token ';' ()
Reducing stack by rule 79 (line 169):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 54 125
Entering state 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 209
Reducing stack by rule 188 (line 399):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 29 23 38 54 125
Entering state 127
Reducing stack by rule 175 (line 370):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 54 125
Entering state 122
Reducing stack by rule 187 (line 395):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 54 125
Entering state 212
Reducing stack by rule 185 (line 390):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 54
Entering state 125
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 116
Reading a token: Next token is token ARROW ()
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125
Entering state 88
Next token is token ARROW ()
Shifting token ARROW ()
Entering state 159
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 242
Reducing stack by rule 13 (line 46):
   $1 = nterm postfix_expression ()
   $2 = token ARROW ()
   $3 = token IDENTIFIER ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125
Entering state 88
Reading a token: Next token is token ASSIGN ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125
Entering state 89
Next token is token ASSIGN ()
Shifting token ASSIGN ()
Entering state 163
Reducing stack by rule 68 (line 155):
   $1 = token ASSIGN ()
-> $$ = nterm assignment_operator ()
Stack now 0 29 23 38 54 125 89
Entering state 174
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 72
Reducing stack by rule 5 (line 36):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 54 125 89 174
Entering state 87
Reducing stack by rule 2 (line 29):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 88
Reading a token: Next token is token ';' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 89
Next token is token ';' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 92
Next token is token ';' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 93
Next token is token ';' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 94
Next token is token ';' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 95
Next token is token ';' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 96
Next token is token ';' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 97
Next token is token ';' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 98
Next token is token ';' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 99
Next token is token ';' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 100
Next token is token ';' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 101
Next token is token ';' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 248
Reducing stack by rule 67 (line 151):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 54 125
Entering state 120
Next token is token ';' ()
Reducing stack by rule 79 (line 169):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 54 125
Entering state 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 209
Reducing stack by rule 188 (line 399):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 29 23 38 54 125
Entering state 127
Reducing stack by rule 175 (line 370):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 54 125
Entering state 122
Reducing stack by rule 187 (line 395):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 54 125
Entering state 212
Reducing stack by rule 185 (line 390):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 54
Entering state 125
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 116
Reading a token: Next token is token ASSIGN_LS ()
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125
Entering state 88
Next token is token ASSIGN_LS ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125
Entering state 89
Next token is token ASSIGN_LS ()
Shifting token ASSIGN_LS ()
Entering state 165
Reducing stack by rule 74 (line 161):
   $1 = token ASSIGN_LS ()
-> $$ = nterm assignment_operator ()
Stack now 0 29 23 38 54 125 89
Entering state 174
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 72
Reducing stack by rule 5 (line 36):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 54 125 89 174
Entering state 87
Reducing stack by rule 2 (line 29):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 88
Reading a token: Next token is token ';' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 89
Next token is token ';' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 92
Next token is token ';' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 93
Next token is token ';' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 94
Next token is token ';' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 95
Next token is token ';' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 96
Next token is token ';' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 97
Next token is token ';' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 98
Next token is token ';' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 99
Next token is token ';' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 100
Next token is token ';' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 101
Next token is token ';' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 248
Reducing stack by rule 67 (line 151):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 54 125
Entering state 120
Next token is token ';' ()
Reducing stack by rule 79 (line 169):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 54 125
Entering state 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 209
Reducing stack by rule 188 (line 399):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 29 23 38 54 125
Entering state 127
Reducing stack by rule 175 (line 370):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 54 125
Entering state 122
Reducing stack by rule 187 (line 395):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 54 125
Entering state 212
Reducing stack by rule 185 (line 390):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 54
Entering state 125
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 116
Reading a token: Next token is token ASSIGN_RS ()
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125
Entering state 88
Next token is token ASSIGN_RS ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125
Entering state 89
Next token is token ASSIGN_RS ()
Shifting token ASSIGN_RS ()
Entering state 164
Reducing stack by rule 75 (line 162):
   $1 = token ASSIGN_RS ()
-> $$ = nterm assignment_operator ()
Stack now 0 29 23 38 54 125 89
Entering state 174
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 72
Reducing stack by rule 5 (line 36):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 54 125 89 174
Entering state 87
Reducing stack by rule 2 (line 29):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 88
Reading a token: Next token is token ';' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 89
Next token is token ';' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 92
Next token is token ';' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 93
Next token is token ';' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 94
Next token is token ';' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 95
Next token is token ';' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 96
Next token is token ';' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 97
Next token is token ';' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 98
Next token is token ';' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 99
Next token is token ';' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 100
Next token is token ';' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 101
Next token is token ';' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 89 174
Entering state 248
Reducing stack by rule 67 (line 151):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 54 125
Entering state 120
Next token is token ';' ()
Reducing stack by rule 79 (line 169):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 54 125
Entering state 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 209
Reducing stack by rule 188 (line 399):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 29 23 38 54 125
Entering state 127
Reducing stack by rule 175 (line 370):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 54 125
Entering state 122
Reducing stack by rule 187 (line 395):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 54 125
Entering state 212
Reducing stack by rule 185 (line 390):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 54
Entering state 125
Reading a token: Next token is token DO ()
Shifting token DO ()
Entering state 109
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 54
Reading a token: Next token is token AUTO ()
Shifting token AUTO ()
Entering state 3
Reducing stack by rule 100 (line 213):
   $1 = token AUTO ()
-> $$ = nterm storage_class_specifier ()
Stack now 0 29 23 38 54 125 109 54
Entering state 24
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 9
Reducing stack by rule 105 (line 221):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 29 23 38 54 125 109 54 24
Entering state 25
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 89 (line 193):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29 23 38 54 125 109 54 24
Entering state 41
Reducing stack by rule 86 (line 190):
   $1 = nterm storage_class_specifier ()
   $2 = nterm declaration_specifiers ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 29 23 38 54 125 109 54
Entering state 56
Next token is token IDENTIFIER ()
Reducing stack by rule 143 (line 294):
-> $$ = nterm pointer_opt ()
Stack now 0 29 23 38 54 125 109 54 56
Entering state 39
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 59
Reducing stack by rule 133 (line 281):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 29 23 38 54 125 109 54 56 39
Entering state 61
Reading a token: Next token is token ASSIGN ()
Reducing stack by rule 132 (line 276):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 29 23 38 54 125 109 54 56
Entering state 68
Next token is token ASSIGN ()
Shifting token ASSIGN ()
Entering state 53
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 72
Reducing stack by rule 5 (line 36):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 54 125 109 54 56 68 53
Entering state 87
Reducing stack by rule 2 (line 29):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 109 54 56 68 53
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 109 54 56 68 53
Entering state 88
Reading a token: Next token is token ',' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 109 54 56 68 53
Entering state 89
Next token is token ',' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 109 54 56 68 53
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 109 54 56 68 53
Entering state 92
Next token is token ',' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 109 54 56 68 53
Entering state 93
Next token is token ',' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 109 54 56 68 53
Entering state 94
Next token is token ',' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 109 54 56 68 53
Entering state 95
Next token is token ',' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 109 54 56 68 53
Entering state 96
Next token is token ',' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 109 54 56 68 53
Entering state 97
Next token is token ',' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 109 54 56 68 53
Entering state 98
Next token is token ',' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 109 54 56 68 53
Entering state 99
Next token is token ',' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 109 54 56 68 53
Entering state 100
Next token is token ',' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 109 54 56 68 53
Entering state 101
Next token is token ',' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 109 54 56 68 53
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 109 54 56 68 53
Entering state 103
Reducing stack by rule 161 (line 341):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 29 23 38 54 125 109 54 56 68 53
Entering state 104
Reducing stack by rule 97 (line 207):
   $1 = nterm declarator ()
   $2 = token ASSIGN ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 29 23 38 54 125 109 54 56
Entering state 37
Reducing stack by rule 94 (line 201):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 29 23 38 54 125 109 54 56
Entering state 36
Next token is token ',' ()
Shifting token ',' ()
Entering state 51
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 143 (line 294):
-> $$ = nterm pointer_opt ()
Stack now 0 29 23 38 54 125 109 54 56 36 51
Entering state 39
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 59
Reducing stack by rule 133 (line 281):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 29 23 38 54 125 109 54 56 36 51 39
Entering state 61
Reading a token: Next token is token ASSIGN ()
Reducing stack by rule 132 (line 276):
   $1 = nterm pointer_opt ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 29 23 38 54 125 109 54 56 36 51
Entering state 68
Next token is token ASSIGN ()
Shifting token ASSIGN ()
Entering state 53
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 72
Reducing stack by rule 5 (line 36):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 54 125 109 54 56 36 51 68 53
Entering state 87
Reducing stack by rule 2 (line 29):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 109 54 56 36 51 68 53
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 109 54 56 36 51 68 53
Entering state 88
Reading a token: Next token is token ';' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 109 54 56 36 51 68 53
Entering state 89
Next token is token ';' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 109 54 56 36 51 68 53
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 109 54 56 36 51 68 53
Entering state 92
Next token is token ';' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 109 54 56 36 51 68 53
Entering state 93
Next token is token ';' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 109 54 56 36 51 68 53
Entering state 94
Next token is token ';' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 109 54 56 36 51 68 53
Entering state 95
Next token is token ';' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 109 54 56 36 51 68 53
Entering state 96
Next token is token ';' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 109 54 56 36 51 68 53
Entering state 97
Next token is token ';' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 109 54 56 36 51 68 53
Entering state 98
Next token is token ';' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 109 54 56 36 51 68 53
Entering state 99
Next token is token ';' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 109 54 56 36 51 68 53
Entering state 100
Next token is token ';' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 109 54 56 36 51 68 53
Entering state 101
Next token is token ';' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 109 54 56 36 51 68 53
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 109 54 56 36 51 68 53
Entering state 103
Reducing stack by rule 161 (line 341):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 29 23 38 54 125 109 54 56 36 51 68 53
Entering state 104
Reducing stack by rule 97 (line 207):
   $1 = nterm declarator ()
   $2 = token ASSIGN ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 29 23 38 54 125 109 54 56 36 51
Entering state 67
Reducing stack by rule 95 (line 202):
   $1 = nterm init_declarator_list ()
   $2 = token ',' ()
   $3 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 29 23 38 54 125 109 54 56
Entering state 36
Next token is token ';' ()
Shifting token ';' ()
Entering state 52
Reducing stack by rule 84 (line 183):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm declaration ()
Stack now 0 29 23 38 54 125 109 54
Entering state 121
Reducing stack by rule 186 (line 394):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 54 125 109 54
Entering state 126
Reducing stack by rule 184 (line 389):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 54 125 109 54
Entering state 125
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 116
Reading a token: Next token is token ASSIGN_BIT_OR ()
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 109 54 125
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 109 54 125
Entering state 88
Next token is token ASSIGN_BIT_OR ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 109 54 125
Entering state 89
Next token is token ASSIGN_BIT_OR ()
Shifting token ASSIGN_BIT_OR ()
Entering state 173
Reducing stack by rule 78 (line 165):
   $1 = token ASSIGN_BIT_OR ()
-> $$ = nterm assignment_operator ()
Stack now 0 29 23 38 54 125 109 54 125 89
Entering state 174
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 109 54 125 89 174
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 109 54 125 89 174
Entering state 88
Reading a token: Next token is token ';' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 109 54 125 89 174
Entering state 89
Next token is token ';' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 109 54 125 89 174
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 109 54 125 89 174
Entering state 92
Next token is token ';' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 109 54 125 89 174
Entering state 93
Next token is token ';' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 109 54 125 89 174
Entering state 94
Next token is token ';' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 109 54 125 89 174
Entering state 95
Next token is token ';' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 109 54 125 89 174
Entering state 96
Next token is token ';' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 109 54 125 89 174
Entering state 97
Next token is token ';' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 109 54 125 89 174
Entering state 98
Next token is token ';' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 109 54 125 89 174
Entering state 99
Next token is token ';' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 109 54 125 89 174
Entering state 100
Next token is token ';' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 109 54 125 89 174
Entering state 101
Next token is token ';' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 109 54 125 89 174
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 109 54 125 89 174
Entering state 248
Reducing stack by rule 67 (line 151):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 109 54 125
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 54 125 109 54 125
Entering state 120
Next token is token ';' ()
Reducing stack by rule 79 (line 169):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 54 125 109 54 125
Entering state 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 209
Reducing stack by rule 188 (line 399):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 29 23 38 54 125 109 54 125
Entering state 127
Reducing stack by rule 175 (line 370):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 54 125 109 54 125
Entering state 122
Reducing stack by rule 187 (line 395):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 54 125 109 54 125
Entering state 212
Reducing stack by rule 185 (line 390):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 54 125 109 54
Entering state 125
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 116
Reading a token: Next token is token DECREMENT ()
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 109 54 125
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 109 54 125
Entering state 88
Next token is token DECREMENT ()
Shifting token DECREMENT ()
Entering state 158
Reducing stack by rule 15 (line 48):
   $1 = nterm postfix_expression ()
   $2 = token DECREMENT ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 109 54 125
Entering state 88
Reading a token: Next token is token ';' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 109 54 125
Entering state 89
Next token is token ';' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 109 54 125
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 109 54 125
Entering state 92
Next token is token ';' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 109 54 125
Entering state 93
Next token is token ';' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 109 54 125
Entering state 94
Next token is token ';' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 109 54 125
Entering state 95
Next token is token ';' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 109 54 125
Entering state 96
Next token is token ';' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 109 54 125
Entering state 97
Next token is token ';' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 109 54 125
Entering state 98
Next token is token ';' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 109 54 125
Entering state 99
Next token is token ';' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 109 54 125
Entering state 100
Next token is token ';' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 109 54 125
Entering state 101
Next token is token ';' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 109 54 125
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 109 54 125
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 54 125 109 54 125
Entering state 120
Next token is token ';' ()
Reducing stack by rule 79 (line 169):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 54 125 109 54 125
Entering state 119
Next token is token ';' ()
Shifting token ';' ()
Entering state 209
Reducing stack by rule 188 (line 399):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 29 23 38 54 125 109 54 125
Entering state 127
Reducing stack by rule 175 (line 370):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 54 125 109 54 125
Entering state 122
Reducing stack by rule 187 (line 395):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 54 125 109 54 125
Entering state 212
Reducing stack by rule 185 (line 390):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 54 125 109 54
Entering state 125
Reading a token: Next token is token IF ()
Shifting token IF ()
Entering state 110
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 202
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 109 54 125 110 202
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 109 54 125 110 202
Entering state 88
Reading a token: Next token is token GT ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 109 54 125 110 202
Entering state 89
Next token is token GT ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 109 54 125 110 202
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 109 54 125 110 202
Entering state 92
Next token is token GT ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 109 54 125 110 202
Entering state 93
Next token is token GT ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 109 54 125 110 202
Entering state 94
Next token is token GT ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 109 54 125 110 202
Entering state 95
Next token is token GT ()
Shifting token GT ()
Entering state 187
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 109 54 125 110 202 95 187
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 109 54 125 110 202 95 187
Entering state 88
Reading a token: Next token is token ')' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 109 54 125 110 202 95 187
Entering state 175
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 109 54 125 110 202 95 187
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 109 54 125 110 202 95 187
Entering state 92
Next token is token ')' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 109 54 125 110 202 95 187
Entering state 93
Next token is token ')' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 109 54 125 110 202 95 187
Entering state 259
Next token is token ')' ()
Reducing stack by rule 48 (line 107):
   $1 = nterm relational_expression ()
   $2 = token GT ()
   $3 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 109 54 125 110 202
Entering state 95
Next token is token ')' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 109 54 125 110 202
Entering state 96
Next token is token ')' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 109 54 125 110 202
Entering state 97
Next token is token ')' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 109 54 125 110 202
Entering state 98
Next token is token ')' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 109 54 125 110 202
Entering state 99
Next token is token ')' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 109 54 125 110 202
Entering state 100
Next token is token ')' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 109 54 125 110 202
Entering state 101
Next token is token ')' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 109 54 125 110 202
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 109 54 125 110 202
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 54 125 109 54 125 110 202
Entering state 271
Next token is token ')' ()
Shifting token ')' ()
Entering state 305
Reading a token: Next token is token BREAK ()
Shifting token BREAK ()
Entering state 105
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 196
Reducing stack by rule 199 (line 422):
   $1 = token BREAK ()
   $2 = token ';' ()
-> $$ = nterm jump_statement ()
Stack now 0 29 23 38 54 125 109 54 125 110 202 271 305
Entering state 131
Reducing stack by rule 178 (line 373):
   $1 = nterm jump_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 54 125 109 54 125 110 202 271 305
Entering state 322
Reducing stack by rule 189 (line 403):
   $1 = token IF ()
   $2 = token '(' ()
   $3 = nterm expression ()
   $4 = token ')' ()
   $5 = nterm statement ()
-> $$ = nterm selection_statement_base ()
Stack now 0 29 23 38 54 125 109 54 125
Entering state 128
Reading a token: Next token is token '}' ()
Reducing stack by rule 190 (line 407):
   $1 = nterm selection_statement_base ()
-> $$ = nterm selection_statement ()
Stack now 0 29 23 38 54 125 109 54 125
Entering state 129
Reducing stack by rule 176 (line 371):
   $1 = nterm selection_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 54 125 109 54 125
Entering state 122
Reducing stack by rule 187 (line 395):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 54 125 109 54 125
Entering state 212
Reducing stack by rule 185 (line 390):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 54 125 109 54
Entering state 125
Next token is token '}' ()
Shifting token '}' ()
Entering state 211
Reducing stack by rule 182 (line 383):
   $1 = token '{' ()
   $2 = nterm block_item_list ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 29 23 38 54 125 109
Entering state 124
Reducing stack by rule 174 (line 369):
   $1 = nterm compound_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 54 125 109
Entering state 201
Reading a token: Next token is token WHILE ()
Shifting token WHILE ()
Entering state 270
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 304
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 109 201 270 304
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 109 201 270 304
Entering state 88
Reading a token: Next token is token OR ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 109 201 270 304
Entering state 89
Next token is token OR ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 109 201 270 304
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 109 201 270 304
Entering state 92
Next token is token OR ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 109 201 270 304
Entering state 93
Next token is token OR ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 109 201 270 304
Entering state 94
Next token is token OR ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 109 201 270 304
Entering state 95
Next token is token OR ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 109 201 270 304
Entering state 96
Next token is token OR ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 109 201 270 304
Entering state 97
Next token is token OR ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 109 201 270 304
Entering state 98
Next token is token OR ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 109 201 270 304
Entering state 99
Next token is token OR ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 109 201 270 304
Entering state 100
Next token is token OR ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 109 201 270 304
Entering state 101
Next token is token OR ()
Shifting token OR ()
Entering state 194
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 70
Reducing stack by rule 1 (line 28):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 109 201 270 304 101 194
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 109 201 270 304 101 194
Entering state 88
Reading a token: Next token is token '+' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 109 201 270 304 101 194
Entering state 175
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 109 201 270 304 101 194
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 109 201 270 304 101 194
Entering state 92
Next token is token '+' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 109 201 270 304 101 194
Entering state 93
Next token is token '+' ()
Shifting token '+' ()
Entering state 180
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 72
Reducing stack by rule 5 (line 36):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 54 125 109 201 270 304 101 194 93 180
Entering state 87
Reducing stack by rule 2 (line 29):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 109 201 270 304 101 194 93 180
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 109 201 270 304 101 194 93 180
Entering state 88
Reading a token: Next token is token ')' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 109 201 270 304 101 194 93 180
Entering state 175
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 109 201 270 304 101 194 93 180
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 109 201 270 304 101 194 93 180
Entering state 252
Next token is token ')' ()
Reducing stack by rule 41 (line 94):
   $1 = nterm additive_expression ()
   $2 = token '+' ()
   $3 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 109 201 270 304 101 194
Entering state 93
Next token is token ')' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 109 201 270 304 101 194
Entering state 94
Next token is token ')' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 109 201 270 304 101 194
Entering state 95
Next token is token ')' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 109 201 270 304 101 194
Entering state 96
Next token is token ')' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 109 201 270 304 101 194
Entering state 97
Next token is token ')' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 109 201 270 304 101 194
Entering state 98
Next token is token ')' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 109 201 270 304 101 194
Entering state 99
Next token is token ')' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 109 201 270 304 101 194
Entering state 266
Next token is token ')' ()
Reducing stack by rule 63 (line 140):
   $1 = nterm logical_OR_expression ()
   $2 = token OR ()
   $3 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 109 201 270 304
Entering state 101
Next token is token ')' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 109 201 270 304
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 109 201 270 304
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 54 125 109 201 270 304
Entering state 321
Next token is token ')' ()
Shifting token ')' ()
Entering state 331
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 335
Reducing stack by rule 194 (line 414):
   $1 = token DO ()
   $2 = nterm statement ()
   $3 = token WHILE ()
   $4 = token '(' ()
   $5 = nterm expression ()
   $6 = token ')' ()
   $7 = token ';' ()
-> $$ = nterm iteration_statement ()
Stack now 0 29 23 38 54 125
Entering state 130
Reducing stack by rule 177 (line 372):
   $1 = nterm iteration_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 54 125
Entering state 122
Reducing stack by rule 187 (line 395):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 54 125
Entering state 212
Reducing stack by rule 185 (line 390):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 54
Entering state 125
Reading a token: Next token is token RETURN ()
Shifting token RETURN ()
Entering state 115
Reading a token: Next token is token INTEGER_CONSTANT ()
Shifting token INTEGER_CONSTANT ()
Entering state 72
Reducing stack by rule 5 (line 36):
   $1 = token INTEGER_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 29 23 38 54 125 115
Entering state 87
Reducing stack by rule 2 (line 29):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 29 23 38 54 125 115
Entering state 86
Reducing stack by rule 9 (line 42):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 29 23 38 54 125 115
Entering state 88
Reading a token: Next token is token ';' ()
Reducing stack by rule 22 (line 64):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 29 23 38 54 125 115
Entering state 89
Next token is token ';' ()
Reducing stack by rule 34 (line 82):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 29 23 38 54 125 115
Entering state 91
Reducing stack by rule 36 (line 87):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 29 23 38 54 125 115
Entering state 92
Next token is token ';' ()
Reducing stack by rule 40 (line 93):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 29 23 38 54 125 115
Entering state 93
Next token is token ';' ()
Reducing stack by rule 43 (line 99):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 29 23 38 54 125 115
Entering state 94
Next token is token ';' ()
Reducing stack by rule 46 (line 105):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 29 23 38 54 125 115
Entering state 95
Next token is token ';' ()
Reducing stack by rule 51 (line 113):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 29 23 38 54 125 115
Entering state 96
Next token is token ';' ()
Reducing stack by rule 54 (line 119):
   $1 = nterm equality_expression ()
-> $$ = nterm AND_expression ()
Stack now 0 29 23 38 54 125 115
Entering state 97
Next token is token ';' ()
Reducing stack by rule 56 (line 124):
   $1 = nterm AND_expression ()
-> $$ = nterm exclusive_OR_expression ()
Stack now 0 29 23 38 54 125 115
Entering state 98
Next token is token ';' ()
Reducing stack by rule 58 (line 129):
   $1 = nterm exclusive_OR_expression ()
-> $$ = nterm inclusive_OR_expression ()
Stack now 0 29 23 38 54 125 115
Entering state 99
Next token is token ';' ()
Reducing stack by rule 60 (line 134):
   $1 = nterm inclusive_OR_expression ()
-> $$ = nterm logical_AND_expression ()
Stack now 0 29 23 38 54 125 115
Entering state 100
Next token is token ';' ()
Reducing stack by rule 62 (line 139):
   $1 = nterm logical_AND_expression ()
-> $$ = nterm logical_OR_expression ()
Stack now 0 29 23 38 54 125 115
Entering state 101
Next token is token ';' ()
Reducing stack by rule 64 (line 144):
   $1 = nterm logical_OR_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 29 23 38 54 125 115
Entering state 102
Reducing stack by rule 66 (line 150):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 29 23 38 54 125 115
Entering state 118
Reducing stack by rule 81 (line 174):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 29 23 38 54 125 115
Entering state 120
Next token is token ';' ()
Reducing stack by rule 79 (line 169):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 29 23 38 54 125 115
Entering state 207
Next token is token ';' ()
Shifting token ';' ()
Entering state 277
Reducing stack by rule 200 (line 423):
   $1 = token RETURN ()
   $2 = nterm expression_opt ()
   $3 = token ';' ()
-> $$ = nterm jump_statement ()
Stack now 0 29 23 38 54 125
Entering state 131
Reducing stack by rule 178 (line 373):
   $1 = nterm jump_statement ()
-> $$ = nterm statement ()
Stack now 0 29 23 38 54 125
Entering state 122
Reducing stack by rule 187 (line 395):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 29 23 38 54 125
Entering state 212
Reducing stack by rule 185 (line 390):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 29 23 38 54
Entering state 125
Reading a token: Next token is token '}' ()
Shifting token '}' ()
Entering state 211
Reducing stack by rule 182 (line 383):
   $1 = token '{' ()
   $2 = nterm block_item_list ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 29 23 38
Entering state 57
Reducing stack by rule 206 (line 438):
   $1 = nterm declaration_specifiers ()
   $2 = nterm declarator ()
   $3 = nterm compound_statement ()
-> $$ = nterm function_definition ()
Stack now 0 29
Entering state 31
Reducing stack by rule 203 (line 432):
   $1 = nterm function_definition ()
-> $$ = nterm external_declaration ()
Stack now 0 29
Entering state 46
Reducing stack by rule 202 (line 428):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 29
Reading a token: Now at end of input.
Shifting token $end ()
Entering state 45
Stack now 0 29 45
Cleanup: popping token $end ()
Cleanup: popping nterm translation_unit ()
